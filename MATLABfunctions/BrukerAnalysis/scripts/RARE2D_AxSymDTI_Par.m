clear allwd = cd;%DataDir = '/opt/topspin2/data/DT/nmr';%DataDir = '/Users/daniel/NMRdata/AVII500/DT';%DataDir = '/Users/daniel/Documents/Spaces/Presentations';DataDir = '/Users/daniel/Dropbox';%ExpNam = {'DDeltaMap'}; expno = 65:68;%ExpNam = {'AOToct8'}; expno = 17:18; expno = 11;%ExpNam = {'AOToct9'}; expno = 17; expno = 11;%ExpNam = {'C14E5_6'}; expno = 17;%ExpNam = {'AOToct8'; 'AOToct9'}; expno = 17;%ExpNam = {'C14E5_temp1'};%ExpNam = {'C14E5_7'; 'AOToct8'; 'AOToct9'; 'C14E5_6'}; expno = 11;%ExpNam = {'C14E5_7'}; expno = 11; expno = [17 20];%ExpNam = {'AOToct_Eq1'}; expno = 14; expno = [14:10:264]; expno = 534:10:784;%ExpNam = {'Saupe_SliceTest'}; expno = 21;%ExpNam = {'AOToct_temp11'}; expno = 26:10:406; expno = 15:10:415;%ExpNam = {'AOToct_Eq2'}; expno = 16; expno = [116:-10:46];%ExpNam = {'RARE2DAxSym_EddyTest'}; expno = 32;%ExpNam = {'AOToct_Eq3'}; expno = 5; expno = 6:10:186; %expno = 15:10:185;%ExpNam = {'AOToct_Eq4'}; expno = 25; expno = [16:10:946]-1;%ExpNam = {'AOToct_Eq5'}; expno = [6:10:236]-1; expno = [246:10:486];%ExpNam = {'AOToct_Eq6'}; expno = [15:10:245]+1;%ExpNam = {'AOToct_Eq7'}; expno = 16;ExpNam = {'AOToct_Eq7'}; expno = [15:10:245]+1; expno = 25; %lb = 150e-6; si = 128; si1 = si;%lb = 150e-6; si = 64; si1 = si;lb = 300e-6; si = 16; si1 = si;%lb = 600e-6; si = 8; si1 = si;%lb = 150e-6; si = 32; si1 = si;%lb = 150e-6; si = 128; si1 = 32;td1start = 2;%td1end = 16;thresh = .11;LoadSer = 1;CheckThresh = 0;MakeFit = 1;PlotInterm = 0;SaveImagesRaw = 1;fs = 15;cd(DataDir)%GetExpnamsfor ndir = 1:length(ExpNam)    ExpNam{ndir}    cd(ExpNam{ndir})    if exist('expno') == 0        GetExpnos    end    for nexp = 1:length(expno)        expno(nexp)        ConvertAcqus = 'Y';    ConvertProcs = 'N';    MakeTextfile = 'N';        if exist([num2str(expno(nexp)) '/NMRacqus.mat']) == 0            ConvertAcqus = 'Y';        end        res = fExpnoInfo2(ConvertAcqus,MakeTextfile,ConvertProcs,expno(nexp));        eval(['load ' num2str(expno(nexp)) '/NMRacqus'])        if any(strcmp(NMRacqus.pulprog,{'DT_qVASrare2d'})) == 1            if LoadSer                            RARE2Dtd1                Imax = abs(Itd1);                Imax(nudim.i/2+(0:2),nudim.j/2+(0:2),2:td1) = 0;                Imax(:,:,1:(td1start-1)) = 0;                Imax = max(reshape(Imax,numel(Imax),1));                            end            %gradient ramps in indirect dimension%             load([num2str(expno(nexp)) '/DRdat'])%             %             NbTtrace = DRdat.NbTtrace;%             NbTDelta = DRdat.NDeltab;%             NbTdir = DRdat.NbTdir;%             NbTtot = NbTtrace*NbTDelta*NbTdir;%             GridSamp = DRdat.GridSamp;                        load([num2str(expno(nexp)) '/DiffRamp'])            NbTtrace = DiffRamp.NbTtrace;            NbTDelta = DiffRamp.NbTDelta;            NbTdir = DiffRamp.NbTdir;            NbTtot = NbTtrace*NbTDelta*NbTdir;            GridSamp = DiffRamp.GridSamp;            figure(1), clf            Iplot = abs(squeeze(Itd1(:,:,(NMRacqu2s.td/NbTdir+1))));            colormap('gray')            Iplot = Iplot/max(max(Iplot));            Iplot(Iplot>thresh) = 1;            clim = [0 1];            imagesc(r.i*1e3,r.j*1e3,Iplot',clim)            set(gca,'YDir','normal')            axis equal, axis tight            if CheckThresh                return            end            fid = fopen([num2str(expno(nexp)) '/rax.txt']);            ramp.ax = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/ray.txt']);            ramp.ay = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/raz.txt']);            ramp.az = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/rbx.txt']);            ramp.bx = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/rby.txt']);            ramp.by = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/rbz.txt']);            ramp.bz = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/rcx.txt']);            ramp.cx = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/rcy.txt']);            ramp.cy = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/rcz.txt']);            ramp.cz = fscanf(fid,'%f');            fclose(fid);            clear ramp            ramp = DiffRamp.mat;            G.ax = ramp.ax*Gmax.*NMRacqus.cnst1/100;            G.bx = ramp.bx*Gmax.*NMRacqus.cnst1/100;            G.cx = ramp.cx*Gmax.*NMRacqus.cnst1/100;            G.ay = ramp.ay*Gmax.*NMRacqus.cnst2/100;            G.by = ramp.by*Gmax.*NMRacqus.cnst2/100;            G.cy = ramp.cy*Gmax.*NMRacqus.cnst2/100;            G.az = ramp.az*Gmax.*NMRacqus.cnst3/100;            G.bz = ramp.bz*Gmax.*NMRacqus.cnst3/100;            G.cz = ramp.cz*Gmax.*NMRacqus.cnst3/100;            %symmetry vector of b-matrix            symv.x = G.cx;            symv.y = G.cy;            symv.z = G.cz;            symv.norm = sqrt(symv.x.^2 + symv.y.^2 + symv.z.^2);            symv.x = symv.x./symv.norm;            symv.y = symv.y./symv.norm;            symv.z = symv.z./symv.norm;            symv.theta = acos(symv.z);            symv.phi = atan2(symv.y,symv.x);            %qVAS gradient time-modulation            fid = fopen([num2str(expno(nexp)) '/qVASa.txt']);            Gmod.a = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/qVASb.txt']);            Gmod.b = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/qVASc.txt']);            Gmod.c = fscanf(fid,'%f');            fclose(fid);            Ndt = length(Gmod.c);            tau = NMRacqus.d3;            dt = tau/Ndt;            %figure(1), clf, plot((1:Ndt)',[Gmod.c Gmod.b Gmod.a],'-'), return            G.x = repmat(Gmod.a,[1, td1]).*repmat(G.ax',[Ndt, 1]) + ...                repmat(Gmod.b,[1, td1]).*repmat(G.bx',[Ndt, 1]) + ...                repmat(Gmod.c,[1, td1]).*repmat(G.cx',[Ndt, 1]);            G.y = repmat(Gmod.a,[1, td1]).*repmat(G.ay',[Ndt, 1]) + ...                repmat(Gmod.b,[1, td1]).*repmat(G.by',[Ndt, 1]) + ...                repmat(Gmod.c,[1, td1]).*repmat(G.cy',[Ndt, 1]);            G.z = repmat(Gmod.a,[1, td1]).*repmat(G.az',[Ndt, 1]) + ...                repmat(Gmod.b,[1, td1]).*repmat(G.bz',[Ndt, 1]) + ...                repmat(Gmod.c,[1, td1]).*repmat(G.cz',[Ndt, 1]);            %dephasing vector F            F.x = cumsum(G.x*dt,1);            F.y = cumsum(G.y*dt,1);            F.z = cumsum(G.z*dt,1);            F.r = sqrt(F.x.^2 + F.y.^2 + F.z.^2);            %diffusion weighting matrix b            %factor 2 from the double DW blocks            bT.xx = 2*gamma^2*sum(F.x.*F.x*dt,1)';            bT.xy = 2*gamma^2*sum(F.x.*F.y*dt,1)';            bT.xz = 2*gamma^2*sum(F.x.*F.z*dt,1)';            bT.yy = 2*gamma^2*sum(F.y.*F.y*dt,1)';            bT.yz = 2*gamma^2*sum(F.y.*F.z*dt,1)';            bT.zz = 2*gamma^2*sum(F.z.*F.z*dt,1)';            b = (bT.xx + bT.yy + bT.zz);            %figure(1), clf, plot((1:td1)',[b],'o'), return            %consistency check of the b-matrix eigenvalues            G.a = sqrt(G.ax.^2 + G.ay.^2 + G.az.^2);            G.b = sqrt(G.bx.^2 + G.by.^2 + G.bz.^2);            G.c = sqrt(G.cx.^2 + G.cy.^2 + G.cz.^2);            %figure(1), clf, plot((1:td1)',G.a,'rx',(1:td1)',G.b,'go',(1:td1)',G.c,'bs'), return            lambda.min = zeros(td1,1);            lambda.mid = zeros(td1,1);            lambda.max = zeros(td1,1);            lambda.XX = zeros(td1,1);            lambda.YY = zeros(td1,1);            lambda.ZZ = zeros(td1,1);            for ntd1 = 1:td1                lambdas = eig([bT.xx(ntd1) bT.xy(ntd1) bT.xz(ntd1)                bT.xy(ntd1) bT.yy(ntd1) bT.yz(ntd1)                bT.xz(ntd1) bT.yz(ntd1) bT.zz(ntd1)]);                [dummy,indx] = sort(lambdas,'descend');                lambda.max(ntd1,1) = min(lambdas(indx(1)));                                        lambda.mid(ntd1,1) = min(lambdas(indx(2)));                                        lambda.min(ntd1,1) = min(lambdas(indx(3)));                                        Dlambdas = abs(lambdas-sum(lambdas)/3);                [dummy,indx] = sort(Dlambdas,'descend');                lambda.ZZ(ntd1,1) = lambdas(indx(1));                lambda.XX(ntd1,1) = lambdas(indx(2));                                        lambda.YY(ntd1,1) = lambdas(indx(3));            end            lambda.trace = (lambda.XX + lambda.YY + lambda.ZZ);            lambda.iso = lambda.trace/3;            lambda.Delta = (lambda.ZZ - (lambda.YY+lambda.XX)/2)./(3*lambda.iso);            lambda.eta = (lambda.YY - lambda.XX+eps)./(2*lambda.iso.*lambda.Delta+eps);            lambda.S = lambda.min;            lambda.P = lambda.mid - lambda.min;            lambda.L = lambda.max - lambda.mid;            G.angle = acos(sqrt((2*lambda.Delta + 1)/3));            bT.N = td1;            bT.trace = lambda.trace;            bT.iso = lambda.iso;            bT.XX = lambda.XX;            bT.YY = lambda.YY;            bT.ZZ = lambda.ZZ;            bT.Delta = lambda.Delta;            bT.eta = lambda.eta;            bT.S = lambda.S;            bT.P = lambda.P;            bT.L = lambda.L;            bT.dir.x = symv.x;            bT.dir.y = symv.y;            bT.dir.z = symv.z;            bT.theta = symv.theta;            bT.phi = symv.phi;            bT.zeta = G.angle;            %figure(1), clf, plot((1:td1)',bT.XX,'r-',(1:td1)',bT.YY,'g--',(1:td1)',bT.ZZ,'b-',(1:td1)',bT.trace,'k--'), return            %figure(1), clf, plot((1:td1)',bT.Delta,'r-',(1:td1)',bT.eta,'g-'), return            figure(1), clf            subplot(2,2,1)            plot(1:td1,b)            subplot(2,2,2)            plot(1:length(Gmod.a),Gmod.a,'r-',1:length(Gmod.a),Gmod.b,'g-',...                1:length(Gmod.a),Gmod.c,'k-')            subplot(2,2,3)            plot(1:td1,symv.x,'ro',1:td1,symv.y,'go',1:td1,symv.z,'bo')            [X,Y] = fSchmidt(symv.x,symv.y,symv.z);            latitude.theta = pi/180*[30:30:150 179];            latitude.phi = linspace(0,2*pi,100);            [latitude.phi,latitude.theta] = ndgrid(latitude.phi,latitude.theta);            latitude.z = cos(latitude.theta);            latitude.x = sin(latitude.theta).*cos(latitude.phi);            latitude.y = sin(latitude.theta).*sin(latitude.phi);            [latitude.X,latitude.Y] = fSchmidt(latitude.x,latitude.y,latitude.z);            longitude.theta = pi/180*linspace(30,180,100);            longitude.phi = pi/180*[30:30:360];            [longitude.theta,longitude.phi] = ndgrid(longitude.theta,longitude.phi);            longitude.z = cos(longitude.theta);            longitude.x = sin(longitude.theta).*cos(longitude.phi);            longitude.y = sin(longitude.theta).*sin(longitude.phi);            [longitude.X,longitude.Y] = fSchmidt(longitude.x,longitude.y,longitude.z);            subplot(2,2,4)                    plot(X,Y,'ko')            hold on            plot(latitude.X,latitude.Y,'b-')            plot(longitude.X,longitude.Y,'b-')            axis equal                        if SaveImagesRaw                ImagesRaw.S = Itd1;                ImagesRaw.r = r;                ImagesRaw.proc.lb = lb;                ImagesRaw.bT = bT;                eval(['save ' num2str(expno(nexp)) '/ImagesRaw ImagesRaw'])                return            end                              if MakeFit    %%                Images_S0 = zeros(nudim.i,nudim.j);                Images_lambda_x = zeros(nudim.i,nudim.j);                Images_lambda_y = zeros(nudim.i,nudim.j);                Images_lambda_z = zeros(nudim.i,nudim.j);                Images_A_alpha = zeros(nudim.i,nudim.j);                Images_A_beta = zeros(nudim.i,nudim.j);                Images_A_gamma = zeros(nudim.i,nudim.j);                Images_Dxx = zeros(nudim.i,nudim.j);                Images_Dyy = zeros(nudim.i,nudim.j);                Images_Dzz = zeros(nudim.i,nudim.j);                Images_lambda1 = zeros(nudim.i,nudim.j);                Images_lambda2 = zeros(nudim.i,nudim.j);                Images_lambda3 = zeros(nudim.i,nudim.j);                Images_v1_x = zeros(nudim.i,nudim.j); Images_v1_y = zeros(nudim.i,nudim.j); Images_v1_z = zeros(nudim.i,nudim.j);                Images_v2_x = zeros(nudim.i,nudim.j); Images_v2_y = zeros(nudim.i,nudim.j); Images_v2_z = zeros(nudim.i,nudim.j);                Images_v3_x = zeros(nudim.i,nudim.j); Images_v3_y = zeros(nudim.i,nudim.j); Images_v3_z = zeros(nudim.i,nudim.j);                Images_S0_gamma = zeros(nudim.i,nudim.j);                Images_MD_gamma = zeros(nudim.i,nudim.j);                Images_mu2i = zeros(nudim.i,nudim.j);                Images_mu2a_gamma = zeros(nudim.i,nudim.j);                Images_Ki = zeros(nudim.i,nudim.j);                Images_Ka_gamma = zeros(nudim.i,nudim.j);                Images_uFA_gamma = zeros(nudim.i,nudim.j);                Images_S0_erf = zeros(nudim.i,nudim.j);                Images_MD_erf = zeros(nudim.i,nudim.j);                Images_DDelta = zeros(nudim.i,nudim.j);                Images_mu2a_erf = zeros(nudim.i,nudim.j);                Images_Ka_erf = zeros(nudim.i,nudim.j);                Images_uFA_erf = zeros(nudim.i,nudim.j);                Images_S_PA = zeros(nudim.i,nudim.j,NbTtrace*NbTDelta);                Images_S_PA_gamma = zeros(nudim.i,nudim.j,NbTtrace*NbTDelta);                Images_S_PA_erf_oblate = zeros(nudim.i,nudim.j,NbTtrace*NbTDelta);                Images_S_PA_erf_prolate = zeros(nudim.i,nudim.j,NbTtrace*NbTDelta);%%                bT_xx = bT.xx;                bT_xy = bT.xy;                bT_xz = bT.xz;                bT_yy = bT.yy;                bT_yz = bT.yz;                bT_zz = bT.zz;                bT_trace = bT.trace;                                                nudim_i = nudim.i;                nudim_j = nudim.j;                options = optimset('MaxFunEvals',1e4,'Display','off');                p =  TimedProgressBar( nudim.j, 10, ...                'Computing. Remaining time: ', ', Completed: ', 'Concluded in ' );                                parfor nj = 1:nudim_j                                            for ni = 1:nudim_i%                 for nj = nudim.j/2+1           %                     for ni = nudim.i/2+1%                 for nj = round(si1/2)           %                     for ni = round(si/2)                        Itd1_pixel = squeeze(Itd1(ni,nj,:));                        indx_fit = td1start:td1;                        PA_weight = zeros(NbTtot,1); PA_weight(indx_fit) = 1;                        PAweight_array = reshape(PA_weight,NbTtrace*NbTDelta,NbTdir);                        S_array = reshape(Itd1_pixel,NbTtrace*NbTDelta,NbTdir);                        S_PA = abs(sum(S_array.*PAweight_array,2)./sum(PAweight_array,2));                                                %figure(1), clf, plot(1:NbTtrace*NbTDelta,abs(S_PA)), return                                                %Yin = squeeze(sum(sum(abs(Itd1(:,:,indx_fit)),1),2));                        Yin = abs(Itd1_pixel(indx_fit));                        Iplot = abs(squeeze(Itd1(:,:,(td1/NbTdir+1))));                        Iplot = Iplot/max(max(Iplot));                        if Iplot(ni,nj)>thresh                            Images_S_PA(ni,nj,:) = S_PA;                            Xin_xx = bT_xx(indx_fit);                            Xin_xy = bT_xy(indx_fit);                            Xin_xz = bT_xz(indx_fit);                            Xin_yy = bT_yy(indx_fit);                            Xin_yz = bT_yz(indx_fit);                            Xin_zz = bT_zz(indx_fit);                            Pin = [max(Yin)   1.5e-9 1e-9 .5e-9 2*pi 2*pi 2*pi]; Funam = 'fexpDTImat';                            LB = [0 1e-11*[1 1 1] 0 0 0]; UB = [2*max(Yin) 10e-9*[1 1 1] 4*pi 4*pi 4*pi];                                                        %figure(1), clf, plot(indx_fit,Yin,'o'), return                            Pout = Pin; Ynorm = mean(Yin); Xnorm = mean(Xin_xx); Pnorm = abs(Pin);                             [Pout,resnorm,residual,exitflag,output] = lsqcurvefit(Funam,Pin./Pnorm,Xin_xx/Xnorm,...                                Yin/Ynorm,LB./Pnorm,UB./Pnorm,options,...                                Xin_xy/Xnorm,Xin_xz/Xnorm,Xin_yy/Xnorm,Xin_yz/Xnorm,Xin_zz/Xnorm,...                                Pnorm,Xnorm,Ynorm); Pout = Pout.*Pnorm;                            Ycalc = feval(Funam,Pout,...                                Xin_xx,Xin_xy,Xin_xz,Xin_yy,Xin_yz,Xin_zz,...                                ones(size(Pin)),1,1); error = Yin - Ycalc;                            %return                                                        if PlotInterm                                figure(2), clf                                subplot(2,2,3)                                plot(indx_fit,Yin,'-o',indx_fit,Ycalc,'-x'), title(['ni=' num2str(ni) ' nj=' num2str(nj)]);                                %return                            end                            S0 = Pout(1);                            lambda_x = Pout(2);                            lambda_y = Pout(3);                            lambda_z = Pout(4);                            A_alpha = angle(exp(i*Pout(5)));                            A_beta = angle(exp(i*Pout(6)));                            A_gamma = angle(exp(i*Pout(7)));                                                        R_gamma = [                                cos(A_gamma) sin(A_gamma) 0                                -sin(A_gamma) cos(A_gamma) 0                                0 0 1];                            R_beta = [                                cos(A_beta) 0 -sin(A_beta)                                0 1 0                                sin(A_beta) 0 cos(A_beta)];                            R_alpha = [                                cos(A_alpha) sin(A_alpha) 0                                -sin(A_alpha) cos(A_alpha) 0                                0 0 1];                            R_mat = R_gamma*R_beta*R_alpha;                            R_inv = inv(R_mat);                            DT_PAS = [                                lambda_x 0 0                                0 lambda_y 0                                0 0 lambda_z];                            DT_LF = R_mat*DT_PAS*R_inv;                            lambdas = [lambda_x lambda_y lambda_z];                            [lambdas,indx] = sort(lambdas,2,'descend');                            lambda1 = lambdas(1);                            lambda2 = lambdas(2);                            lambda3 = lambdas(3);                            vx_x = R_mat(1,1); vx_y = R_mat(2,1); vx_z = R_mat(3,1);                            vy_x = R_mat(1,2); vy_y = R_mat(2,2); vy_z = R_mat(3,2);                            vz_x = R_mat(1,3); vz_y = R_mat(2,3); vz_z = R_mat(3,3);                            v1_x = 0; v1_y = 0; v1_z = 0;                            v2_x = 0; v2_y = 0; v2_z = 0;                            v3_x = 0; v3_y = 0; v3_z = 0;                            if lambda1 == lambda_x                                            if lambda2 == lambda_y                                    v1_x = vx_x; v1_y = vx_y; v1_z = vx_z;                                    v2_x = vy_x; v2_y = vy_y; v2_z = vy_z;                                    v3_x = vz_x; v3_y = vz_y; v3_z = vz_z;                                elseif lambda2 == lambda_z                                    v1_x = vx_x; v1_y = vx_y; v1_z = vx_z;                                    v2_x = vz_x; v2_y = vz_y; v2_z = vz_z;                                    v3_x = vy_x; v3_y = vy_y; v3_z = vy_z;                                end                            elseif lambda1 == lambda_y                                            if lambda2 == lambda_x                                    v1_x = vy_x; v1_y = vy_y; v1_z = vy_z;                                    v2_x = vx_x; v2_y = vx_y; v2_z = vx_z;                                    v3_x = vz_x; v3_y = vz_y; v3_z = vz_z;                                elseif lambda2 == lambda_z                                    v1_x = vy_x; v1_y = vy_y; v1_z = vy_z;                                    v2_x = vz_x; v2_y = vz_y; v2_z = vz_z;                                    v3_x = vx_x; v3_y = vx_y; v3_z = vx_z;                                end                            elseif lambda1 == lambda_z                                            if lambda2 == lambda_x                                    v1_x = vz_x; v1_y = vz_y; v1_z = vz_z;                                    v2_x = vx_x; v2_y = vx_y; v2_z = vx_z;                                    v3_x = vy_x; v3_y = vy_y; v3_z = vy_z;                                elseif lambda2 == lambda_y                                    v1_x = vz_x; v1_y = vz_y; v1_z = vz_z;                                    v2_x = vy_x; v2_y = vy_y; v2_z = vy_z;                                    v3_x = vx_x; v3_y = vx_y; v3_z = vx_z;                                end                            end                            Images_S0(ni,nj) = S0;                            Images_lambda_x(ni,nj) = lambda_x;                            Images_lambda_y(ni,nj) = lambda_y;                            Images_lambda_z(ni,nj) = lambda_z;                            Images_A_alpha(ni,nj) = A_alpha;                            Images_A_beta(ni,nj) = A_beta;                            Images_A_gamma(ni,nj) = A_gamma;                            Images_Dxx(ni,nj) = DT_LF(1,1);                            Images_Dyy(ni,nj) = DT_LF(2,2);                            Images_Dzz(ni,nj) = DT_LF(3,3);                            Images_lambda1(ni,nj) = lambda1;                            Images_lambda2(ni,nj) = lambda2;                            Images_lambda3(ni,nj) = lambda3;                            Images_v1_x(ni,nj) = v1_x; Images_v1_y(ni,nj) = v1_y; Images_v1_z(ni,nj) = v1_z;                            Images_v2_x(ni,nj) = v2_x; Images_v2_y(ni,nj) = v2_y; Images_v2_z(ni,nj) = v2_z;                            Images_v3_x(ni,nj) = v3_x; Images_v3_y(ni,nj) = v3_y; Images_v3_z(ni,nj) = v3_z;                            MD = (lambda_x+lambda_y+lambda_z)/3;                                                        mu2_FA = 4/45*((lambda_z-lambda_x)^2+(lambda_y-lambda_z)*(lambda_y-lambda_x));                            FA = sqrt(1/2)*sqrt((lambda_z-lambda_y).^2+(lambda_z-lambda_x).^2+(lambda_y-lambda_x).^2)...                            ./sqrt(lambda_z.^2+lambda_y.^2+lambda_x.^2);                            indx_fit = (1:NbTtrace*NbTDelta);                            Xin = bT_trace(indx_fit);                                                        if PlotInterm                                %figure(1), clf                                subplot(2,2,2)                                for ndir = 1:NbTdir                                    indx_fit = (1:NbTtrace*NbTDelta) + (ndir-1)*NbTtrace*NbTDelta;                                    Xin = bT.trace(indx_fit);                                    Yin = Itd1_pixel(indx_fit);                                    Xin_xx = bT.xx(indx_fit);                                    Xin_xy = bT.xy(indx_fit);                                    Xin_xz = bT.xz(indx_fit);                                    Xin_yy = bT.yy(indx_fit);                                    Xin_yz = bT.yz(indx_fit);                                    Xin_zz = bT.zz(indx_fit);                                    Ycalc = feval(Funam,Pout,...                                        Xin_xx,Xin_xy,Xin_xz,Xin_yy,Xin_yz,Xin_zz,...                                        ones(size(Pin)),1,1);                                    h1 = semilogy(Xin,abs(Yin),'o');                                    hold on                                    h2 = semilogy(Xin,Ycalc,'-');                                    indx = (ndir-1)*NbTtrace*NbTDelta + 1;                                    Rval = bT.dir.x(indx_fit); Rval = abs(Rval(1));                                    Gval = bT.dir.y(indx_fit); Gval = abs(Gval(1));                                    Bval = bT.dir.z(indx_fit); Bval = abs(Bval(1));                                    set([h1 h2],'Color',[Rval Gval Bval])                                end                                semilogy(reshape(Xin,NbTtrace,NbTDelta),abs(reshape(S_PA,NbTtrace,NbTDelta)),'ko-','LineWidth',2)                                hold off                                set(gca,'YLim',S0*[1e-2 1.1])                                title(['MD=' num2str(MD,3) ' m^2/s FA=' num2str(FA,2)])                            end                                                                                %%                            ThreshFit = .1;                            Xthresh = -log(ThreshFit)/MD;                            fitpoints = find(exp(-Xin*MD)>ThreshFit); fitpoints = 1:length(Xin);                                                        Xin  = bT.trace(1:NbTtrace*NbTDelta);                            Xin2  = bT.Delta(1:NbTtrace*NbTDelta);                            Yin = abs(S_PA);                            Weight = .5-.5*erf(5*(Xin-Xthresh)/Xthresh);                            %figure(1), clf, plot(Xin,Weight,'o'), return                            %figure(1), clf, semilogy(Xin,Yin,'o'), return                            Pin = [S0 1.5*MD .1*MD .4*MD]; Funam = 'fexpgamma_AxSym';                            LB = [.95*S0 0.5*MD .0001*MD .5*sqrt(mu2_FA) ]; UB = [1.5*S0 2*MD MD MD];                            Pout = Pin; Ynorm = mean(Yin)./(Weight+1e-10 ); Xnorm = mean(Xin); Pnorm = Pin;                             Pout = Pnorm.*lsqcurvefit(Funam,Pin./Pnorm,Xin/Xnorm,Yin./Ynorm,...                                LB./Pnorm,UB./Pnorm,options,Pnorm,Xnorm,Ynorm,Xin2);                            Yout = feval(Funam,Pout,Xin,ones(size(Pout)),1,1,Xin2); error = Yin - Yout;                            chisq_gamma = sum(error.^2);                            %figure(1), clf, semilogy(Xin,Yin,'o',Xin,Yout,'-'), return                            S0_gamma = Pout(1);                            MD_gamma = Pout(2);                            mu2i = Pout(3)^2;                             mu2a_gamma = Pout(4)^2;                                                        Ycalc_MD = S0_gamma*exp(-MD_gamma*Xin);                                                                if PlotInterm                                subplot(2,2,4)                                semilogy(reshape(Xin,[NbTtrace NbTDelta]),reshape(Yout,[NbTtrace NbTDelta]),'g-')                                hold on                                semilogy(reshape(Xin,[NbTtrace NbTDelta]),reshape(Yin,[NbTtrace NbTDelta]),'ko')                                semilogy(reshape(Xin,[NbTtrace NbTDelta]),reshape(Ycalc_MD,[NbTtrace NbTDelta]),'k-')                                semilogy(Xin(1:NbTtrace),S0_gamma*Weight(1:NbTtrace),'k--')                                %hold off                                set(gca,'XLim',max(Xin)*[-.1 1.1],'YLim',S0*[1e-2 1.1])                            end                            Images_S_PA_gamma(ni,nj,:) = Yout;                                                        uFA_gamma = sqrt(3/2)*sqrt(1/(1+2/5*MD_gamma^2/(mu2a_gamma)));                                                        Ki = mu2i/MD_gamma^2;                            Ka_gamma = mu2a_gamma/MD_gamma^2;%%                            Pin = [S0_gamma MD_gamma sqrt(5/4*mu2a_gamma/MD_gamma^2)]; Funam = 'fDiffVACSY2';                            UB = [max(S0_gamma)*1.1 MD_gamma*2 1];                            LB = [max(S0_gamma)*0.9 MD_gamma*.5 0];                                                        Pout = Pin; Ynorm = mean(Yin); Xnorm = mean(Xin); Pnorm = abs(Pin);                             Pout = Pnorm.*lsqcurvefit(Funam,Pin./Pnorm,Xin/Xnorm,Yin/Ynorm,LB./Pnorm,UB./Pnorm,options,Xin2,Pnorm,Xnorm,Ynorm);                            Yout = feval(Funam,Pout,Xin,Xin2); error = Yin - Yout;                            chisq_prolate = sum(error.^2);                            Pout_prolate = Pout; Yout_prolate = Yout;                            Pin = [S0_gamma MD_gamma -sqrt(5/4*mu2a_gamma/MD_gamma^2)]; Funam = 'fDiffVACSY2';                            UB = [max(S0_gamma)*1.1 MD_gamma*2 0];                            LB = [max(S0_gamma)*0.9 MD_gamma*.5 -.5];                            Pout = Pin; Ynorm = mean(Yin); Xnorm = mean(Xin); Pnorm = abs(Pin);                             Pout = Pnorm.*lsqcurvefit(Funam,Pin./Pnorm,Xin/Xnorm,Yin/Ynorm,LB./Pnorm,UB./Pnorm,options,Xin2,Pnorm,Xnorm,Ynorm);                            Yout = feval(Funam,Pout,Xin,Xin2); error = Yin - Yout;                            chisq_oblate = sum(error.^2);                            Pout_oblate = Pout; Yout_oblate = Yout;                            semilogy(reshape(Xin,[NbTtrace NbTDelta]),reshape(Yout_prolate,[NbTtrace NbTDelta]),'r-')                            semilogy(reshape(Xin,[NbTtrace NbTDelta]),reshape(Yout_oblate,[NbTtrace NbTDelta]),'b-')                            %figure(1), clf, semilogy(Xin,Yin,'o',Xin,Yout,'-'), return                                                        Images_S_PA_erf_prolate(ni,nj,:) = Yout_prolate;                            Images_S_PA_erf_oblate(ni,nj,:) = Yout_oblate;                            if chisq_oblate < chisq_prolate                                Pout = Pout_oblate;                            else                                Pout = Pout_prolate;                            end                            mu2a_oblate = 4/5*(Pout_oblate(3).*Pout_oblate(2)).^2;                            mu2a_prolate = 4/5*(Pout_prolate(3).*Pout_prolate(2)).^2;%                             if mu2a_prolate > mu2a_gamma%                                 Pout = Pout_oblate;%                             end                                                        S0_erf = Pout(1);                            MD_erf = Pout(2);                            DDelta = Pout(3);                            mu2a_erf = 4/5*(DDelta.*MD_erf).^2;                            Ka_erf = mu2a_erf/MD_erf^2;                            uFA_erf = sqrt(3/2)*sqrt(1/(1+2/5*MD_erf^2/(mu2a_erf)));                                                        if PlotInterm                                title({['MD=' num2str(MD_gamma,3) ' m^2/s K_i=' num2str(Ki,2) ' K_a=' num2str(Ka_gamma,2) ' uFA=' num2str(uFA_gamma,2)];                                    ['MD=' num2str(MD_erf,3) ' m^2/s D_{\Delta}=' num2str(DDelta,2) ' K_a=' num2str(Ka_erf,2) ' uFA=' num2str(uFA_erf,2)]})                                subplot(2,2,1)                                Iplot = abs(squeeze(Itd1(:,:,(NMRacqu2s.td/NbTdir+1))));                                colormap('gray')                                Iplot = Iplot/max(max(Iplot));                                Iplot(Iplot>thresh) = 1;                                clim = [0 1];                                imagesc(r.i*1e3,r.j*1e3,Iplot',clim)                                set(gca,'YDir','normal')                                axis equal, axis tight                                hold on                                plot(r.i(ni)*1e3,r.j(nj)*1e3,'ro')                                title(['ni=' num2str(ni) ' nj=' num2str(nj)])                                pause(.1)                            end                                                        Images_S0_gamma(ni,nj) = S0_gamma;                            Images_MD_gamma(ni,nj) = MD_gamma;                            Images_mu2i(ni,nj) = mu2i;                            Images_mu2a_gamma(ni,nj) = mu2a_gamma;                            Images_Ki(ni,nj) = Ki;                            Images_Ka_gamma(ni,nj) = Ka_gamma;                            Images_uFA_gamma(ni,nj) = uFA_gamma;                            Images_S0_erf(ni,nj) = S0_erf;                            Images_MD_erf(ni,nj) = MD_erf;                            Images_DDelta(ni,nj) = DDelta;                            Images_mu2a_erf(ni,nj) = mu2a_erf;                            Images_Ka_erf(ni,nj) = Ka_erf;                            Images_uFA_erf(ni,nj) = uFA_erf;                                                                               end                                      end                    p.progress; %Counter for progress report                end                p.stop;                                 Images.S0 = Images_S0;                Images.lambda.x = Images_lambda_x;                Images.lambda.y = Images_lambda_y;                Images.lambda.z = Images_lambda_z;                Images.A.alpha = Images_A_alpha;                Images.A.beta = Images_A_beta;                Images.A.gamma = Images_A_gamma;                Images.Dxx = Images_Dxx;                Images.Dyy = Images_Dyy;                Images.Dzz = Images_Dzz;                Images.lambda1 = Images_lambda1;                Images.lambda2 = Images_lambda2;                Images.lambda3 = Images_lambda3;                Images.v1.x = Images_v1_x; Images.v1.y = Images_v1_y; Images.v1.z = Images_v1_z;                Images.v2.x = Images_v2_x; Images.v2.y = Images_v2_y; Images.v2.z = Images_v2_z;                Images.v3.x = Images_v3_x; Images.v3.y = Images_v3_y; Images.v3.z = Images_v3_z;                Images.S0_gamma = Images_S0_gamma;                Images.MD_gamma = Images_MD_gamma;                Images.mu2i = Images_mu2i;                Images.mu2a_gamma = Images_mu2a_gamma;                Images.Ki = Images_Ki;                Images.Ka_gamma = Images_Ka_gamma;                Images.uFA_gamma = Images_uFA_gamma;                Images.S0_erf = Images_S0_erf;                Images.MD_erf = Images_MD_erf;                Images.DDelta = Images_DDelta;                Images.mu2a_erf = Images_mu2a_erf;                Images.Ka_erf = Images_Ka_erf;                Images.uFA_erf = Images_uFA_erf;                Images.S_PA = Images_S_PA;                Images.S_PA_gamma = Images_S_PA_gamma;                Images.S_PA_erf_oblate = Images_S_PA_erf_oblate;                Images.S_PA_erf_prolate = Images_S_PA_erf_prolate;                                Images.MD = 1/3*(Images.lambda1+Images.lambda2+Images.lambda3);                Images.FA = sqrt(1/2)*sqrt((Images.lambda1-Images.lambda2).^2+(Images.lambda1-Images.lambda3).^2+(Images.lambda2-Images.lambda3).^2)...                    ./sqrt(Images.lambda1.^2+Images.lambda2.^2+Images.lambda3.^2);                Images.FA(find(isnan(Images.FA)==1)) = 0;                Images.CL = (Images.lambda1 - Images.lambda2)./Images.lambda1;                Images.CL(find(isnan(Images.CL)==1)) = 0;                Images.CP = (Images.lambda2 - Images.lambda3)./Images.lambda1;                Images.CP(find(isnan(Images.CP)==1)) = 0;                eval(['save ' num2str(expno(nexp)) '/Images Images r'])            else                eval(['load ' num2str(expno(nexp)) '/Images'])            end            %%            %Images.Dxyz.r = sqrt(Images.Dxx.^2 + Images.Dyy.^2 + Images.Dzz.^2);            Images.Dxyz.r = Images.lambda1;            Images.Dxyz.x = Images.Dxx./Images.Dxyz.r;            Images.Dxyz.y = Images.Dyy./Images.Dxyz.r;            Images.Dxyz.z = Images.Dzz./Images.Dxyz.r;                        MDmax = max([reshape(Images.MD,numel(Images.MD),1); reshape(Images.MD_gamma,numel(Images.MD),1); reshape(Images.MD_erf,numel(Images.MD),1)]);            Dmax = max([max(reshape(Images.Dxx,numel(Images.MD),1)) max(reshape(Images.Dyy,numel(Images.MD),1)) max(reshape(Images.Dzz,numel(Images.MD),1))]);            %MDmax = 2e-9;            %Dmax = 2e-9;                        width = .13; height = width*11/8.5;            bottom = .05; dheight = height+.05;            left = .05; dleft = width;            X = r.i*1e3;            Y = r.j*1e3;            C = zeros(numel(Y),numel(X),3);                        figure(3), clf            axes('position',[left bottom+2*dheight width height])            c.bright = Images.S0'/max(max(Images.S0));            c.r = ones(size(c.bright)); c.g = ones(size(c.bright)); c.b = ones(size(c.bright));            C(:,:,1) = c.r.*c.bright; C(:,:,2) = c.g.*c.bright; C(:,:,3) = c.b.*c.bright;            image(X,Y,C)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('S_0')            axes('position',[left+1*dleft bottom+2*dheight width height])            c.bright = Images.MD'/MDmax;            c.r = ones(size(c.bright)); c.g = ones(size(c.bright)); c.b = ones(size(c.bright));            C(:,:,1) = c.r.*c.bright; C(:,:,2) = c.g.*c.bright; C(:,:,3) = c.b.*c.bright;            image(X,Y,C)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('MD')            axes('position',[left+2*dleft bottom+2*dheight width height])            c.bright = Images.FA';            c.r = (Images.Dxx./Images.lambda1)';            c.g = (Images.Dyy./Images.lambda1)';            c.b = (Images.Dzz./Images.lambda1)';            C(:,:,1) = c.r.*c.bright; C(:,:,2) = c.g.*c.bright; C(:,:,3) = c.b.*c.bright;            image(X,Y,C)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('FA')            axes('position',[left+3*dleft bottom+2*dheight width height])            c.bright = Images.CL';            c.r = abs(Images.v1.x)';            c.g = abs(Images.v1.y)';            c.b = abs(Images.v1.z)';            C(:,:,1) = c.r.*c.bright; C(:,:,2) = c.g.*c.bright; C(:,:,3) = c.b.*c.bright;            image(X,Y,C)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('CL')            axes('position',[left+4*dleft bottom+2*dheight width height])            c.bright = Images.CP';            c.r = abs(Images.v3.x)';            c.g = abs(Images.v3.y)';            c.b = abs(Images.v3.z)';            C(:,:,1) = c.r.*c.bright; C(:,:,2) = c.g.*c.bright; C(:,:,3) = c.b.*c.bright;            image(X,Y,C)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('CP')                        axes('position',[left bottom+1*dheight width height])            c.bright = Images.S0_gamma'/max(max(Images.S0_gamma));            c.r = ones(size(c.bright)); c.g = ones(size(c.bright)); c.b = ones(size(c.bright));            C(:,:,1) = c.r.*c.bright; C(:,:,2) = c.g.*c.bright; C(:,:,3) = c.b.*c.bright;            image(X,Y,C)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('S_0')            axes('position',[left+1*dleft bottom+1*dheight width height])            c.bright = Images.MD_gamma'/MDmax;            c.r = ones(size(c.bright)); c.g = ones(size(c.bright)); c.b = ones(size(c.bright));            C(:,:,1) = c.r.*c.bright; C(:,:,2) = c.g.*c.bright; C(:,:,3) = c.b.*c.bright;            image(X,Y,C)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('MD')            axes('position',[left+2*dleft bottom+1*dheight width height])            c.bright = Images.uFA_gamma';            c.r = (Images.Dxx./Images.lambda1)';            c.g = (Images.Dyy./Images.lambda1)';            c.b = (Images.Dzz./Images.lambda1)';            C(:,:,1) = c.r.*c.bright; C(:,:,2) = c.g.*c.bright; C(:,:,3) = c.b.*c.bright;            image(X,Y,C)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('uFA')            axes('position',[left+3*dleft bottom+1*dheight width height])            c.bright = Images.Ki';            c.r = ones(size(c.bright)); c.g = ones(size(c.bright)); c.b = ones(size(c.bright));            C(:,:,1) = c.r.*c.bright; C(:,:,2) = c.g.*c.bright; C(:,:,3) = c.b.*c.bright;            image(X,Y,C)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('K_i')%%            axes('position',[left+4*dleft bottom+1*dheight width height])            c.bright = Images.Ka_gamma'/.8;            c.r = ones(size(c.bright)); c.g = ones(size(c.bright)); c.b = ones(size(c.bright));            C(:,:,1) = c.r.*c.bright; C(:,:,2) = c.g.*c.bright; C(:,:,3) = c.b.*c.bright;            image(X,Y,C)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('K_a')                         axes('position',[left bottom+0*dheight width height])            c.bright = Images.S0_erf'/max(max(Images.S0_erf));            c.r = ones(size(c.bright)); c.g = ones(size(c.bright)); c.b = ones(size(c.bright));            C(:,:,1) = c.r.*c.bright; C(:,:,2) = c.g.*c.bright; C(:,:,3) = c.b.*c.bright;            image(X,Y,C)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('S_0')            axes('position',[left+1*dleft bottom+0*dheight width height])            c.bright = Images.MD_erf'/MDmax;            c.r = ones(size(c.bright)); c.g = ones(size(c.bright)); c.b = ones(size(c.bright));            C(:,:,1) = c.r.*c.bright; C(:,:,2) = c.g.*c.bright; C(:,:,3) = c.b.*c.bright;            image(X,Y,C)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('MD')            axes('position',[left+2*dleft bottom+0*dheight width height])            c.bright = Images.uFA_erf';            c.r = (Images.Dxx./Images.lambda1)';            c.g = (Images.Dyy./Images.lambda1)';            c.b = (Images.Dzz./Images.lambda1)';            C(:,:,1) = c.r.*c.bright; C(:,:,2) = c.g.*c.bright; C(:,:,3) = c.b.*c.bright;            image(X,Y,C)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('uFA')            axes('position',[left+3*dleft bottom+0*dheight width height])            c.bright = abs(Images.DDelta');            c.r = ones(size(c.bright)); c.g = ones(size(c.bright)); c.b = ones(size(c.bright));            indx = Images.DDelta'<0; c.r(indx) = 0; c.g(indx) = 0;            c.bright(indx) = 2*c.bright(indx);            indx = Images.DDelta'>0; c.b(indx) = 0; c.g(indx) = 0;            C(:,:,1) = c.r.*c.bright; C(:,:,2) = c.g.*c.bright; C(:,:,3) = c.b.*c.bright;            image(X,Y,C)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('D_\Delta')            axes('position',[left+4*dleft bottom+0*dheight width height])            c.bright = Images.Ka_erf'/.8;            c.r = ones(size(c.bright)); c.g = ones(size(c.bright)); c.b = ones(size(c.bright));            C(:,:,1) = c.r.*c.bright; C(:,:,2) = c.g.*c.bright; C(:,:,3) = c.b.*c.bright;            image(X,Y,C)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('K_a')                         axes('position',[.1 .75 .25 .2])            plot(1:length(Gmod.a),Gmod.a,'r-',1:length(Gmod.a),Gmod.b,'g-',...                1:length(Gmod.a),Gmod.c,'k-')            axis tight, axis off            title(['G_{max}=' num2str(NMRacqus.cnst1/100*Gmax) ' T/m \tau=' num2str(NMRacqus.d3*1e3) 'ms'])             axes('position',[.45 .75 .25 .2])            plot(bT.trace,bT.Delta,'ko')            axis([max(bT.trace)*[-.1 1.1] -.6 1.2])            xlabel('b / sm^-^2'), ylabel('b_\Delta')            title(['Ntrace=' num2str(NbTtrace) ' Nb_\Delta=' num2str(NbTDelta) ' Ntot=' num2str(NbTtot)])             set(gca,'Box','off','TickDir','out')            [X,Y] = fSchmidt(bT.dir.x,bT.dir.y,bT.dir.z);            latitude.theta = pi/180*[30:30:150 179];            latitude.phi = linspace(0,2*pi,100);            [latitude.phi,latitude.theta] = ndgrid(latitude.phi,latitude.theta);            latitude.z = cos(latitude.theta);            latitude.x = sin(latitude.theta).*cos(latitude.phi);            latitude.y = sin(latitude.theta).*sin(latitude.phi);            [latitude.X,latitude.Y] = fSchmidt(latitude.x,latitude.y,latitude.z);            longitude.theta = pi/180*linspace(30,180,100);            longitude.phi = pi/180*[30:30:360];            [longitude.theta,longitude.phi] = ndgrid(longitude.theta,longitude.phi);            longitude.z = cos(longitude.theta);            longitude.x = sin(longitude.theta).*cos(longitude.phi);            longitude.y = sin(longitude.theta).*sin(longitude.phi);            [longitude.X,longitude.Y] = fSchmidt(longitude.x,longitude.y,longitude.z);            axes('position',[.8 .75 .2/11*8.5 .2])            plot(X,Y,'ko')            hold on            plot(latitude.X,latitude.Y,'b-')            plot(longitude.X,longitude.Y,'b-')            axis equal, axis off             title(['Ndir=' num2str(NbTdir)])            axes('position',[.75 .15 .24 .5])            S0 = sum(sum(Images.S0,1),2);            X = reshape(bT.trace(1:NbTtrace*NbTDelta,1),[NbTtrace NbTDelta]);            Y = reshape(squeeze(sum(sum(Images.S_PA,1),2)),[NbTtrace NbTDelta])/S0;            semilogy(X,Y,'ko')            hold on            Y = reshape(squeeze(sum(sum(Images.S_PA_gamma,1),2)),[NbTtrace NbTDelta])/S0;            semilogy(X,Y,'g-')            Y = reshape(squeeze(sum(sum(Images.S_PA_erf_oblate,1),2)),[NbTtrace NbTDelta])/S0;            semilogy(X,Y,'b-')            Y = reshape(squeeze(sum(sum(Images.S_PA_erf_prolate,1),2)),[NbTtrace NbTDelta])/S0;            semilogy(X,Y,'r-')            axis tight            set(gca,'Box','off','TickDir','out','YLim',[1e-2 1.1],'XLim',max(bT.trace)*[-.1 1.1])            xlabel('b / sm^-^2')                                                    delete([num2str(expno(nexp)) '/ReportFig*'])            delete([num2str(expno(nexp)) '/acqu*sconv'])            %delete([num2str(expno(nexp)) '/*Dat.mat'])            delete([num2str(expno(nexp)) '/*.jpg'])            set(gcf, 'PaperPosition', [0 0 11 8.5],'PaperSize', [11 8.5]);             eval(['print ' num2str(expno(nexp)) '/ReportFig -loose -dpdf'])        end    end    cd ..endcd(wd)