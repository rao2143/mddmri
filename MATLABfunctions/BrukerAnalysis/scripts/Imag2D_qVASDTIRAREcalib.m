clear allwd = cd;% DataDir = '/opt/topspin2/data/DT/nmr';DataDir = '/Users/daniel/NMRdata/AVII500/DT';ExpNam = {'DiffVACSY'}; expno = 125;lb = 5e-4;si = 16;si1 = si;td1start = 2;%td1end = 16;thresh = .1;MakeFit = 1;fontsize = 15;cd(DataDir)%GetExpnamsfor ndir = 1:length(ExpNam)    ExpNam{ndir}    cd(ExpNam{ndir})    if exist('expno') == 0        GetExpnos    end    for nexp = 1:length(expno)        expno(nexp)        ConvertAcqus = 'Y';    ConvertProcs = 'N';    MakeTextfile = 'N';        if exist([num2str(expno(nexp)) '/NMRacqus.mat']) == 0            ConvertAcqus = 'Y';        end        res = fExpnoInfo2(ConvertAcqus,MakeTextfile,ConvertProcs,expno(nexp));        eval(['load ' num2str(expno(nexp)) '/NMRacqus'])        if any(strcmp(NMRacqus.pulprog,{'DT_qVASdtirare2d'})) == 1                        RARE2Dtd1%%                        %figure(1), clf, imagesc(abs(Itd1(:,:,2))'), axis square, return                        Imax = abs(Itd1);            Imax(nudim.i/2+(0:2),nudim.j/2+(0:2),2:td1) = 0;            Imax = max(reshape(Imax,numel(Imax),1));            fid = fopen([num2str(expno(nexp)) '/rax.txt']);            ramp.ax = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/ray.txt']);            ramp.ay = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/raz.txt']);            ramp.az = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/rbx.txt']);            ramp.bx = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/rby.txt']);            ramp.by = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/rbz.txt']);            ramp.bz = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/rcx.txt']);            ramp.cx = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/rcy.txt']);            ramp.cy = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/rcz.txt']);            ramp.cz = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/qVASa.txt']);            Gmod.a = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/qVASb.txt']);            Gmod.b = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/qVASc.txt']);            Gmod.c = fscanf(fid,'%f');            fclose(fid);                       Ndt = length(Gmod.c);            tau = NMRacqus.d3;            dt = tau/Ndt;            %figure(1), clf, plot((1:Ndt)',[Gmod.c Gmod.b Gmod.a],'-'), return                        G.ax = ramp.ax*Gmax.*NMRacqus.cnst1/100;            G.bx = ramp.bx*Gmax.*NMRacqus.cnst1/100;            G.cx = ramp.cx*Gmax.*NMRacqus.cnst1/100;            G.ay = ramp.ay*Gmax.*NMRacqus.cnst2/100;            G.by = ramp.by*Gmax.*NMRacqus.cnst2/100;            G.cy = ramp.cy*Gmax.*NMRacqus.cnst2/100;            G.az = ramp.az*Gmax.*NMRacqus.cnst3/100;            G.bz = ramp.bz*Gmax.*NMRacqus.cnst3/100;            G.cz = ramp.cz*Gmax.*NMRacqus.cnst3/100;                        G.a = sqrt(G.ax.^2 + G.ay.^2 + G.az.^2);            G.b = sqrt(G.bx.^2 + G.by.^2 + G.bz.^2);            G.c = sqrt(G.cx.^2 + G.cy.^2 + G.cz.^2);            G.angle = angle(G.c + i*G.b);                        %figure(1), clf, plot((1:td1)',[G.c G.b G.a],'o'), return            %figure(1), clf, plot((1:td1)',[G.angle],'-o'), return            G.r = abs(G.c + i*G.b);;%            figure(1), clf, plot((1:td1)',[G.r],'-o'), return%             G.max = max([G.iso; G.r]);%%            Gnorm.a = G.a./G.r;            Gnorm.b = G.b./G.r;            Gnorm.c = G.c./G.r;                        F.a = cumsum(Gmod.a*dt);            F.b = cumsum(Gmod.b*dt);            F.c = cumsum(Gmod.c*dt);%            F.iso = sqrt(F.x.^2 + F.y.^2 + F.z.^2);            b.c = sum(F.c.^2*dt);            b = 2*b.c*gamma^2*G.r.^2;            Gmin = min(G.r);            tol = 1e-3;            indx_Gmin = find([G.r>Gmin*(1-tol) & G.r<Gmin*(1+tol)]);            Ndir = length(indx_Gmin);            NG = td1/Ndir;            figure(1), clf            subplot(2,2,1)            plot(1:td1,b)            subplot(2,2,2)            plot(1:Ndt,Gmod.a,'r-',1:Ndt,Gmod.b,'g-',...                1:Ndt,Gmod.c,'b-')            subplot(2,2,3)            plot(1:td1,Gnorm.a,'ro',1:td1,Gnorm.b,'go',1:td1,Gnorm.c,'bo')%             Gdir = Gnorm.x + i*Gnorm.y;%             subplot(2,2,4)%             plot(real(Gdir),imag(Gdir),'bo')% % %             [X,Y] = fSchmidt(Gnorm.x,Gnorm.y,Gnorm.z);%             latitude.theta = pi/180*[30:30:150 179];%             latitude.phi = linspace(0,2*pi,100);%             [latitude.phi,latitude.theta] = ndgrid(latitude.phi,latitude.theta);%             latitude.z = cos(latitude.theta);%             latitude.x = sin(latitude.theta).*cos(latitude.phi);%             latitude.y = sin(latitude.theta).*sin(latitude.phi);%             [latitude.X,latitude.Y] = fSchmidt(latitude.x,latitude.y,latitude.z);%             longitude.theta = pi/180*linspace(30,180,100);%             longitude.phi = pi/180*[30:30:360];%             [longitude.theta,longitude.phi] = ndgrid(longitude.theta,longitude.phi);%             longitude.z = cos(longitude.theta);%             longitude.x = sin(longitude.theta).*cos(longitude.phi);%             longitude.y = sin(longitude.theta).*sin(longitude.phi);%             [longitude.X,longitude.Y] = fSchmidt(longitude.x,longitude.y,longitude.z);% %             subplot(2,2,4)        %             plot(X,Y,'ko')%             hold on%             plot(latitude.X,latitude.Y,'b-')%             plot(longitude.X,longitude.Y,'b-')%             axis equal            Pixel1.i = 14; Pixel1.j = 9;            Iplot1 = squeeze(Itd1(Pixel1.i,Pixel1.j,:));            Iplot1 = abs(sum(reshape(Iplot1,NG,Ndir),2));            Pixel2.i = 10; Pixel2.j = 9;            Iplot2 = squeeze(Itd1(Pixel2.i,Pixel2.j,:));            Iplot2 = abs(sum(reshape(Iplot2,NG,Ndir),2));            figure(1), clf, semilogy(b(1:NG),Iplot1,'o',b(1:NG),Iplot2,'o',b(1:NG),Iplot1+Iplot2,'o')return%%            Images.S0 = zeros(nudim.i,nudim.j);            Images.lambda.x = zeros(nudim.i,nudim.j);            Images.lambda.y = zeros(nudim.i,nudim.j);            Images.lambda.z = zeros(nudim.i,nudim.j);            Images.A.alpha = zeros(nudim.i,nudim.j);            Images.A.beta = zeros(nudim.i,nudim.j);            Images.A.gamma = zeros(nudim.i,nudim.j);            Images.Dxx = zeros(nudim.i,nudim.j);            Images.Dyy = zeros(nudim.i,nudim.j);            Images.Dzz = zeros(nudim.i,nudim.j);            Images.lambda1 = zeros(nudim.i,nudim.j);            Images.lambda2 = zeros(nudim.i,nudim.j);            Images.lambda3 = zeros(nudim.i,nudim.j);            Images.v1.x = zeros(nudim.i,nudim.j); Images.v1.y = zeros(nudim.i,nudim.j); Images.v1.z = zeros(nudim.i,nudim.j);            Images.v2.x = zeros(nudim.i,nudim.j); Images.v2.y = zeros(nudim.i,nudim.j); Images.v2.z = zeros(nudim.i,nudim.j);            Images.v3.x = zeros(nudim.i,nudim.j); Images.v3.y = zeros(nudim.i,nudim.j); Images.v3.z = zeros(nudim.i,nudim.j);            Images.uFA = zeros(nudim.i,nudim.j);            Images.K = zeros(nudim.i,nudim.j);            Images.mu2_iso = zeros(nudim.i,nudim.j);            Images.mu2_aniso = zeros(nudim.i,nudim.j);            Images.S0_gamma = zeros(nudim.i,nudim.j);            Images.mD_gamma = zeros(nudim.i,nudim.j);                        if exist('td1end') == 0                td1end = td1;            end%%            if MakeFit                for nj = 1:nudim.j                               for ni = 1:nudim.i%                 for nj = nudim.j/2+1           %                     for ni = nudim.i/2+1%                 for nj = 85           %                     for ni = 116                        index_fit = td1start:min([length(G.r) td1end]);                        %Yin = squeeze(sum(sum(abs(Itd1(:,:,index_fit)),1),2));                        Yin = abs(squeeze(Itd1(ni,nj,index_fit)));                        Iplot = abs(squeeze(Itd1(:,:,(NMRacqu2s.td/Ndir+1))));                        Iplot = Iplot/max(max(Iplot));                        if Iplot(ni,nj)>thresh                            Xin = b(index_fit);                            Gnormpoints.x = Gnorm.x(index_fit); Gnormpoints.y = Gnorm.y(index_fit); Gnormpoints.z = Gnorm.z(index_fit);                            Pin = [Yin(1)   1.5e-9 1e-9 .5e-9 2*pi 2*pi 2*pi]; Funam = 'fexpDTI';                            LB = [0 1e-11*[1 1 1] 0 0 0]; UB = [2*Yin(1) 3e-9*[1 1 1] 4*pi 4*pi 4*pi];                            options = optimset('MaxFunEvals',1e4);                            %figure(1), clf, plot(index_fit,Yin,'o'), return                            Pout = Pin; Ynorm = mean(Yin); Xnorm = mean(Xin); Pnorm = abs(Pin);                             [Pout,resnorm,residual,exitflag,output] = lsqcurvefit(Funam,Pin./Pnorm,Xin/Xnorm,Yin/Ynorm,LB./Pnorm,UB./Pnorm,options,Pnorm,Xnorm,Ynorm,Gnormpoints); Pout = Pout.*Pnorm;                            Ycalc = feval(Funam,Pout,Xin,ones(size(Pin)),1,1,Gnormpoints); error = Yin - Ycalc;                            %return                            figure(2), clf                            subplot(2,2,3)                            plot(index_fit,Yin,'-o',index_fit,Ycalc,'-x'), title(['ni=' num2str(ni) ' nj=' num2str(nj)]);                            %return                            S0 = Pout(1);                            lambda.x = Pout(2);                            lambda.y = Pout(3);                            lambda.z = Pout(4);                            A.alpha = angle(exp(i*Pout(5)));                            A.beta = angle(exp(i*Pout(6)));                            A.gamma = angle(exp(i*Pout(7)));                                                        R.gamma = [                                cos(A.gamma) sin(A.gamma) 0                                -sin(A.gamma) cos(A.gamma) 0                                0 0 1];                            R.beta = [                                cos(A.beta) 0 -sin(A.beta)                                0 1 0                                sin(A.beta) 0 cos(A.beta)];                            R.alpha = [                                cos(A.alpha) sin(A.alpha) 0                                -sin(A.alpha) cos(A.alpha) 0                                0 0 1];                            R.mat = R.gamma*R.beta*R.alpha;                            R.inv = inv(R.mat);                            DT_PAS = [                                lambda.x 0 0                                0 lambda.y 0                                0 0 lambda.z];                            DT_LF = R.mat*DT_PAS*R.inv;                            lambdas = [lambda.x lambda.y lambda.z];                            [lambdas,index] = sort(lambdas,2,'descend');                            lambda1 = lambdas(1);                            lambda2 = lambdas(2);                            lambda3 = lambdas(3);                            vx.x = R.mat(1,1); vx.y = R.mat(2,1); vx.z = R.mat(3,1);                            vy.x = R.mat(1,2); vy.y = R.mat(2,2); vy.z = R.mat(3,2);                            vz.x = R.mat(1,3); vz.y = R.mat(2,3); vz.z = R.mat(3,3);                            if lambda1 == lambda.x                                            if lambda2 == lambda.y                                    v1.x = vx.x; v1.y = vx.y; v1.z = vx.z;                                    v2.x = vy.x; v2.y = vy.y; v2.z = vy.z;                                    v3.x = vz.x; v3.y = vz.y; v3.z = vz.z;                                elseif lambda2 == lambda.z                                    v1.x = vx.x; v1.y = vx.y; v1.z = vx.z;                                    v2.x = vz.x; v2.y = vz.y; v2.z = vz.z;                                    v3.x = vy.x; v3.y = vy.y; v3.z = vy.z;                                end                            elseif lambda1 == lambda.y                                            if lambda2 == lambda.x                                    v1.x = vy.x; v1.y = vy.y; v1.z = vy.z;                                    v2.x = vx.x; v2.y = vx.y; v2.z = vx.z;                                    v3.x = vz.x; v3.y = vz.y; v3.z = vz.z;                                elseif lambda2 == lambda.z                                    v1.x = vy.x; v1.y = vy.y; v1.z = vy.z;                                    v2.x = vz.x; v2.y = vz.y; v2.z = vz.z;                                    v3.x = vx.x; v3.y = vx.y; v3.z = vx.z;                                end                            elseif lambda1 == lambda.z                                            if lambda2 == lambda.x                                    v1.x = vz.x; v1.y = vz.y; v1.z = vz.z;                                    v2.x = vx.x; v2.y = vx.y; v2.z = vx.z;                                    v3.x = vy.x; v3.y = vy.y; v3.z = vy.z;                                elseif lambda2 == lambda.y                                    v1.x = vz.x; v1.y = vz.y; v1.z = vz.z;                                    v2.x = vy.x; v2.y = vy.y; v2.z = vy.z;                                    v3.x = vx.x; v3.y = vx.y; v3.z = vx.z;                                end                            end                            Images.S0(ni,nj) = S0;                            Images.lambda.x(ni,nj) = lambda.x;                            Images.lambda.y(ni,nj) = lambda.y;                            Images.lambda.z(ni,nj) = lambda.z;                            Images.A.alpha(ni,nj) = A.alpha;                            Images.A.beta(ni,nj) = A.beta;                            Images.A.gamma(ni,nj) = A.gamma;                            Images.Dxx(ni,nj) = DT_LF(1,1);                            Images.Dyy(ni,nj) = DT_LF(2,2);                            Images.Dzz(ni,nj) = DT_LF(3,3);                            Images.lambda1(ni,nj) = lambda1;                            Images.lambda2(ni,nj) = lambda2;                            Images.lambda3(ni,nj) = lambda3;                            Images.v1.x(ni,nj) = v1.x; Images.v1.y(ni,nj) = v1.y; Images.v1.z(ni,nj) = v1.z;                            Images.v2.x(ni,nj) = v2.x; Images.v2.y(ni,nj) = v2.y; Images.v2.z(ni,nj) = v2.z;                            Images.v3.x(ni,nj) = v3.x; Images.v3.y(ni,nj) = v3.y; Images.v3.z(ni,nj) = v3.z;                            %figure(1), clf                            subplot(2,2,2)                                                        Yin_iso = zeros(NMRacqu2s.td/Ndir,1);                            Yin_aniso = zeros(NMRacqu2s.td/Ndir,1);                            Ndir_iso = 0; Ndir_aniso = 0;                            for ndir = 1:Ndir                                index_fit = ndir - Ndir + (Ndir:Ndir:length(G.r));                                index_fit = index_fit(1:length(index_fit));                                Yin = squeeze(Itd1(ni,nj,index_fit));                                Xin = b(index_fit);                                Gnormpoints.x = Gnorm.x(index_fit); Gnormpoints.y = Gnorm.y(index_fit); Gnormpoints.z = Gnorm.z(index_fit);                                Ycalc = feval(Funam,Pout,Xin,ones(size(Pin)),1,1,Gnormpoints); error = Yin - Ycalc;                                h1 = semilogy(Xin,abs(Yin),'o');                                hold on                                h2 = semilogy(Xin,Ycalc,'-');                                if isnan(Gnormpoints.x(1)) == 1                                    colorv = [0 0 0];                                    if ndir == 1                                        Yin(1) = 0;                                    end                                    Yin_iso = Yin_iso+Yin;                                    Xin_iso = Xin;                                    Ndir_iso = Ndir_iso+1;                                else                                    colorv = abs([Gnormpoints.x(1) Gnormpoints.y(1) Gnormpoints.z(1)]);                                    Yin_aniso = Yin_aniso+Yin;                                    Xin_aniso = Xin;                                    Ndir_aniso = Ndir_aniso+1;                                end                                set([h1 h2],'Color',colorv)                            end                            Yin_aniso = abs(Yin_aniso)/Ndir_aniso;                            Yin_iso = abs(Yin_iso)/Ndir_iso;                            Yin_iso(1) = Yin_iso(1)*Ndir_iso/(Ndir_iso-1);                            if Ndir_iso==1, Yin_iso(1) = Yin_aniso(1); end                                                        semilogy(Xin_aniso,Yin_aniso,'ko-')                            semilogy(Xin_iso,Yin_iso,'ks-')                            hold off                            set(gca,'YLim',S0*[2e-2 1.1])                                                        mD = (lambda.x+lambda.y+lambda.z)/3;                                                        mu2_FA = 4/45*((lambda.z-lambda.x)^2+(lambda.y-lambda.z)*(lambda.y-lambda.x));                            FA = sqrt(1/2)*sqrt((lambda.z-lambda.y).^2+(lambda.z-lambda.x).^2+(lambda.y-lambda.x).^2)...                            ./sqrt(lambda.z.^2+lambda.y.^2+lambda.x.^2);                                                    title(['MD=' num2str(mD,3) ' m^2/s FA=' num2str(FA,2)])                            ThreshFit = .1;                            Xthresh = -log(ThreshFit)/mD;                            fitpoints = find(exp(-Xin_iso*mD)>ThreshFit); fitpoints = 1:length(Xin_iso);                                                        Xin  = [Xin_aniso(fitpoints); Xin_iso(fitpoints)];                            Yin = [Yin_aniso(fitpoints); Yin_iso(fitpoints)];                            Weight = .5-.5*erf(5*(Xin-Xthresh)/Xthresh);                            %figure(1), clf, plot(Xin,Weight,'o'), return                            %figure(1), clf, semilogy(Xin,Yin,'o'), return                            Pin = [S0 1.5*mD .4*mD .4*mD]; Funam = 'fmuaniso';                            LB = [.95*S0 0.5*mD .5*sqrt(mu2_FA) .0001*mD]; UB = [1.5*S0 2*mD mD mD];                            Pout = Pin; Ynorm = mean(Yin)./(Weight+1e-10 ); Xnorm = mean(Xin); Pnorm = Pin;                             Pout = Pnorm.*lsqcurvefit(Funam,Pin./Pnorm,Xin/Xnorm,Yin./Ynorm,LB./Pnorm,UB./Pnorm,options,Pnorm,Xnorm,Ynorm);                            Xthresh = -log(ThreshFit)/Pout(2);                            Weight = .5-.5*erf(5*(Xin-Xthresh)/Xthresh);                            Pout = Pin; Ynorm = mean(Yin)./(Weight+1e-10 ); Xnorm = mean(Xin); Pnorm = Pin;                             Pout = Pnorm.*lsqcurvefit(Funam,Pin./Pnorm,Xin/Xnorm,Yin./Ynorm,LB./Pnorm,UB./Pnorm,options,Pnorm,Xnorm,Ynorm);                            Yout = feval(Funam,Pout,Xin); error = Yin - Yout;                            Ycalc_aniso = Yout(1:(length(Yout)/2));                            Ycalc_iso = Yout((length(Yout)/2+1):length(Yout));                            mu2_aniso = Pout(3)^2;                            mu2_iso = Pout(4)^2;                             mD_gamma = Pout(2);                            S0_gamma = Pout(1);                                                        Ycalc_mD = S0_gamma*exp(-mD_gamma*Xin_iso);                                                                subplot(2,2,4)                            semilogy(Xin_aniso(fitpoints),Ycalc_aniso(fitpoints),'r-')                            hold on                            semilogy(Xin_aniso,Yin_aniso,'ro')                            semilogy(Xin_iso,Yin_iso,'bs')                            semilogy(Xin_iso(fitpoints),Ycalc_iso(fitpoints),'b-')                            semilogy(Xin_iso(fitpoints),Ycalc_mD(fitpoints),'k-')                            semilogy(Xin,S0_gamma*Weight,'k--')                            hold off                            set(gca,'XLim',Xthresh*[-.1 1.1],'YLim',S0*[ThreshFit 1.1])                                                        uFA = sqrt(3/2)*sqrt(1/(1+2/5*mD_gamma^2/(mu2_aniso-mu2_iso)));                            if mu2_iso>mu2_aniso                                uFA = 0;                            end                                                        K_iso = mu2_iso/mD_gamma^2;                            title(['K=' num2str(K_iso,2) ' uFA=' num2str(uFA,2)])                                                        subplot(2,2,1)                            Iplot = abs(squeeze(Itd1(:,:,(NMRacqu2s.td/Ndir+1))));                            colormap('gray')                            Iplot = Iplot/max(max(Iplot));                            Iplot(Iplot>thresh) = 1;                            clim = [0 1];                            imagesc(r.i*1e3,r.j*1e3,Iplot',clim)                            set(gca,'YDir','normal')                            axis equal, axis tight                            hold on                            plot(r.i(ni)*1e3,r.j(nj)*1e3,'ro')                            title(['ni=' num2str(ni) ' nj=' num2str(nj)])                                                                                    Images.K(ni,nj) = K_iso;                            Images.uFA(ni,nj) = uFA;                            Images.mu2_iso(ni,nj) = mu2_iso;                            Images.mu2_aniso(ni,nj) = mu2_aniso;                            Images.S0_gamma(ni,nj) = S0_gamma;                            Images.mD_gamma(ni,nj) = mD_gamma;                            pause(.1)                                                   end                                      end                end                Images.ADC = 1/3*(Images.lambda1+Images.lambda2+Images.lambda3);                Images.FA = sqrt(1/2)*sqrt((Images.lambda1-Images.lambda2).^2+(Images.lambda1-Images.lambda3).^2+(Images.lambda2-Images.lambda3).^2)...                    ./sqrt(Images.lambda1.^2+Images.lambda2.^2+Images.lambda3.^2);                Images.FA(find(isnan(Images.FA)==1)) = 0;                Images.CL = (Images.lambda1 - Images.lambda2)./Images.lambda1;                Images.CL(find(isnan(Images.CL)==1)) = 0;                Images.CP = (Images.lambda2 - Images.lambda3)./Images.lambda1;                Images.CP(find(isnan(Images.CP)==1)) = 0;                eval(['save ' num2str(expno(nexp)) '/Images Images r'])            else                eval(['load ' num2str(expno(nexp)) '/Images'])            end            %%            %Images.Dxyz.r = sqrt(Images.Dxx.^2 + Images.Dyy.^2 + Images.Dzz.^2);            Images.Dxyz.r = Images.lambda1;            Images.Dxyz.x = Images.Dxx./Images.Dxyz.r;            Images.Dxyz.y = Images.Dyy./Images.Dxyz.r;            Images.Dxyz.z = Images.Dzz./Images.Dxyz.r;                        ADCmax = max(reshape(Images.ADC,numel(Images.ADC),1));            Dmax = max([max(reshape(Images.Dxx,numel(Images.ADC),1)) max(reshape(Images.Dyy,numel(Images.ADC),1)) max(reshape(Images.Dzz,numel(Images.ADC),1))]);            ADCmax = 2e-9;            Dmax = 2e-9;                        width = .2;            figure(3), clf            colormap('gray')            axes('position',[.1 .6 width .35])            Iplot = squeeze(Images.S0(:,:)/max(max(Images.S0)));            clim = [0 1];            imagesc(r.i*1e3,r.j*1e3,Iplot',clim)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('S0')            %colorbar            axes('position',[.3 .6 width .35])            Iplot = squeeze(Images.ADC(:,:));            clim = [0 ADCmax];            imagesc(r.i*1e3,r.j*1e3,Iplot',clim)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('ADC')            %colorbar            axes('position',[.5 .6 width .35])            Iplot = zeros(nudim.j,nudim.i,3);%             Iplot(:,:,1) = squeeze(Images.Dxx(:,:))'/Dmax;%             Iplot(:,:,2) = squeeze(Images.Dyy(:,:))'/Dmax;%             Iplot(:,:,3) = squeeze(Images.Dzz(:,:))'/Dmax;            Iplot(:,:,1) = (Images.FA.*Images.Dxyz.x)';            Iplot(:,:,2) = (Images.FA.*Images.Dxyz.y)';            Iplot(:,:,3) = (Images.FA.*Images.Dxyz.z)';%             Iplot(:,:,1) = (Images.FA.*(1-Images.Dxyz.x))';%             Iplot(:,:,2) = (Images.FA.*(1-Images.Dxyz.y))';%             Iplot(:,:,3) = (Images.FA.*(1-Images.Dxyz.z))';            Iplot(find(Iplot>1)) = 1;            Iplot(find(Iplot<0)) = 0;            imagesc(r.i*1e3,r.j*1e3,Iplot)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('Dxx,Dyy,Dzz')            axes('position',[.7 .6 width .35])            Iplot = squeeze(Images.K(:,:));            clim = [0 1];            imagesc(r.i*1e3,r.j*1e3,Iplot',clim)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title(['K max = ' num2str(max(max(Images.K)),2)])             axes('position',[.1 .1 width .35])            Iplot = squeeze(Images.FA(:,:));            clim = [0 1];            imagesc(r.i*1e3,r.j*1e3,Iplot',clim)            set(gca,'YDir','normal')            axis equal, axis tight            xlabel('read / mm'), ylabel('phase / mm')            title(['FA max = ' num2str(max(max(Images.FA)),2)])            %colorbar            axes('position',[.3 .1 width .35])            Iplot = squeeze(Images.uFA(:,:));            clim = [0 1];            imagesc(r.i*1e3,r.j*1e3,Iplot',clim)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('uFA')            %colorbar            axes('position',[.5 .1 width .35])            Iplot = squeeze(Images.CP(:,:));            clim = [0 1];            imagesc(r.i*1e3,r.j*1e3,Iplot',clim)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('CP')            %colorbar            axes('position',[.7 .1 width .35])            Iplot = squeeze(Images.CL(:,:));            clim = [0 1];            imagesc(r.i*1e3,r.j*1e3,Iplot',clim)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('CL')            %colorbar%%            delete([num2str(expno(nexp)) '/ReportFig*'])            delete([num2str(expno(nexp)) '/acqu*sconv'])            delete([num2str(expno(nexp)) '/*Dat.mat'])            delete([num2str(expno(nexp)) '/*.jpg'])            eval(['print ' num2str(expno(nexp)) '/ReportFig -loose -depsc'])        end    end    cd ..endcd(wd)