clear allwd = cd;DataDir = '/opt/topspin2/data/DT/nmr';%DataDir = '/Users/daniel/NMRdata/AVII500/DT';%ExpNam = {'DTItest'}; expno = 125; %expno = 347:360;%ExpNam = {'NafionDTI'}; expno = 31; %expno = [26:28 31:38]; %ExpNam = {'DTI_HHnerve'}; %expno = 415;%ExpNam = {'MIC5_10mm_gradcalib'}; expno = 130;%ExpNam = {'isoaniso_test'}; expno = 104;%ExpNam = {'qMASdtirare2d_test'}; expno = 9;ExpNam = {'MIC5_2H_setup'}; expno = 17;lb = 150e-6;si = 64; si1 = 32;td1start = 2;td1end = 32;thresh = .1;MakeFit = 0;fs = 15;cd(DataDir)%GetExpnamsfor ndir = 1:length(ExpNam)    ExpNam{ndir}    cd(ExpNam{ndir})    if exist('expno') == 0        GetExpnos    end    for nexp = 1:length(expno)        expno(nexp)        ConvertAcqus = 'N';    ConvertProcs = 'N';    MakeTextfile = 'N';        if exist([num2str(expno(nexp)) '/NMRacqus.mat']) == 0            ConvertAcqus = 'Y';        end        res = fExpnoInfo2(ConvertAcqus,MakeTextfile,ConvertProcs,expno(nexp));        eval(['load ' num2str(expno(nexp)) '/NMRacqus'])        if any(strcmp(NMRacqus.pulprog,{'DT_dtirare2d','DT_dpgsedtirare2d'})) == 1                        RARE2Dtd1                        Imax = abs(Itd1);            Imax(nudim.i/2+(0:2),nudim.j/2+(0:2),2:td1) = 0;            Imax(:,:,1:(td1start-1)) = 0;            Imax = max(reshape(Imax,numel(Imax),1));            fid = fopen([num2str(expno(nexp)) '/difframp_x.txt']);            difframp.x = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/difframp_y.txt']);            difframp.y = fscanf(fid,'%f');            fclose(fid);            fid = fopen([num2str(expno(nexp)) '/difframp_z.txt']);            difframp.z = fscanf(fid,'%f');            fclose(fid);            G.x = difframp.x*Gmax.*NMRacqus.cnst1/100;            G.y = difframp.y*Gmax.*NMRacqus.cnst2/100;            G.z = difframp.z*Gmax.*NMRacqus.cnst3/100;            G.r = sqrt(G.x.^2 + G.y.^2 + G.z.^2);            Gnorm.x = G.x./G.r;            Gnorm.y = G.y./G.r;            Gnorm.z = G.z./G.r;            if any(strcmp(NMRacqus.pulprog,{'DT_dtirare2d'})) == 1                delta = NMRacqus.d3+NMRacqus.d2; epsilon = NMRacqus.d2;                Delta = delta+epsilon+2*NMRacqus.d4+NMRacqus.p12/1e6+4*NMRacqus.d32;                tdiff = Delta-delta/3+epsilon^3/30/delta^2-epsilon^2/6/delta;                q = gamma*G.r*delta/2/pi;                b = (2*pi*q).^2*tdiff;            elseif any(strcmp(NMRacqus.pulprog,{'DT_dpgsedtirare2d'})) == 1                delta = NMRacqus.d3+NMRacqus.d2; epsilon = NMRacqus.d2;                Delta = delta+epsilon+2*NMRacqus.d4+NMRacqus.p12/1e6+4*NMRacqus.d32;                tdiff = Delta-delta/3+epsilon^3/30/delta^2-epsilon^2/6/delta;                q = gamma*G.r*delta/2/pi;                b = 2*(2*pi*q).^2*tdiff;            end                        Images.S0 = zeros(nudim.i,nudim.j);            Images.lambda.x = zeros(nudim.i,nudim.j);            Images.lambda.y = zeros(nudim.i,nudim.j);            Images.lambda.z = zeros(nudim.i,nudim.j);            Images.A.alpha = zeros(nudim.i,nudim.j);            Images.A.beta = zeros(nudim.i,nudim.j);            Images.A.gamma = zeros(nudim.i,nudim.j);            Images.Dxx = zeros(nudim.i,nudim.j);            Images.Dyy = zeros(nudim.i,nudim.j);            Images.Dzz = zeros(nudim.i,nudim.j);            Images.lambda1 = zeros(nudim.i,nudim.j);            Images.lambda2 = zeros(nudim.i,nudim.j);            Images.lambda3 = zeros(nudim.i,nudim.j);            Images.v1.x = zeros(nudim.i,nudim.j); Images.v1.y = zeros(nudim.i,nudim.j); Images.v1.z = zeros(nudim.i,nudim.j);            Images.v2.x = zeros(nudim.i,nudim.j); Images.v2.y = zeros(nudim.i,nudim.j); Images.v2.z = zeros(nudim.i,nudim.j);            Images.v3.x = zeros(nudim.i,nudim.j); Images.v3.y = zeros(nudim.i,nudim.j); Images.v3.z = zeros(nudim.i,nudim.j);                        if exist('td1end') == 0                td1end = td1;            end            if MakeFit                for nj = 1:nudim.j                           %for nj = nudim.j/2+2                               for ni = 1:nudim.i                    %for ni = nudim.i/2+2                        index_fit = td1start:min([length(G.r) td1end]);                        %Yin = squeeze(sum(sum(abs(Itd1(:,:,index_fit)),1),2));                        Yin = abs(squeeze(Itd1(ni,nj,index_fit)));                        Xin = b(index_fit);                        Gnormpoints.x = Gnorm.x(index_fit); Gnormpoints.y = Gnorm.y(index_fit); Gnormpoints.z = Gnorm.z(index_fit);                                                                        Pin = [Yin(1)   1.5e-9 1e-9 .1e-9 2*pi 2*pi 2*pi]; Funam = 'fexpDTI';                        LB = [0 1e-11*[1 1 1] 0 0 0]; UB = [2*Yin(1) 3e-9*[1 1 1] 4*pi 4*pi 4*pi];                        options = optimset('MaxFunEvals',1e4);                        if max(Yin)>Imax*thresh                            %figure(1), clf, plot(index_fit,Yin,'o'), return                            Pout = Pin; Ynorm = mean(Yin); Xnorm = mean(Xin); Pnorm = abs(Pin);                             [Pout,resnorm,residual,exitflag,output] = lsqcurvefit(Funam,Pin./Pnorm,Xin/Xnorm,Yin/Ynorm,LB./Pnorm,UB./Pnorm,options,Pnorm,Xnorm,Ynorm,Gnormpoints); Pout = Pout.*Pnorm;                            Ycalc = feval(Funam,Pout,Xin,ones(size(Pin)),1,1,Gnormpoints); error = Yin - Ycalc;                            %return                            %figure(2), clf, plot(index_fit,Yin,'-o',index_fit,Ycalc,'-x'), title(num2str(nj)); Pout', pause(.1)                            %return                            S0 = Pout(1);                            lambda.x = Pout(2);                            lambda.y = Pout(3);                            lambda.z = Pout(4);                            A.alpha = angle(exp(i*Pout(5)));                            A.beta = angle(exp(i*Pout(6)));                            A.gamma = angle(exp(i*Pout(7)));                            R.gamma = [                                cos(A.gamma) sin(A.gamma) 0                                -sin(A.gamma) cos(A.gamma) 0                                0 0 1];                            R.beta = [                                cos(A.beta) 0 -sin(A.beta)                                0 1 0                                sin(A.beta) 0 cos(A.beta)];                            R.alpha = [                                cos(A.alpha) sin(A.alpha) 0                                -sin(A.alpha) cos(A.alpha) 0                                0 0 1];                            R.mat = R.gamma*R.beta*R.alpha;                            R.inv = inv(R.mat);                            DT_PAS = [                                lambda.x 0 0                                0 lambda.y 0                                0 0 lambda.z];                            DT_LF = R.mat*DT_PAS*R.inv;                            lambdas = [lambda.x lambda.y lambda.z];                            [lambdas,index] = sort(lambdas,2,'descend');                            lambda1 = lambdas(1);                            lambda2 = lambdas(2);                            lambda3 = lambdas(3);                            vx.x = R.mat(1,1); vx.y = R.mat(2,1); vx.z = R.mat(3,1);                            vy.x = R.mat(1,2); vy.y = R.mat(2,2); vy.z = R.mat(3,2);                            vz.x = R.mat(1,3); vz.y = R.mat(2,3); vz.z = R.mat(3,3);                            if lambda1 == lambda.x                                            if lambda2 == lambda.y                                    v1.x = vx.x; v1.y = vx.y; v1.z = vx.z;                                    v2.x = vy.x; v2.y = vy.y; v2.z = vy.z;                                    v3.x = vz.x; v3.y = vz.y; v3.z = vz.z;                                elseif lambda2 == lambda.z                                    v1.x = vx.x; v1.y = vx.y; v1.z = vx.z;                                    v2.x = vz.x; v2.y = vz.y; v2.z = vz.z;                                    v3.x = vy.x; v3.y = vy.y; v3.z = vy.z;                                end                            elseif lambda1 == lambda.y                                            if lambda2 == lambda.x                                    v1.x = vy.x; v1.y = vy.y; v1.z = vy.z;                                    v2.x = vx.x; v2.y = vx.y; v2.z = vx.z;                                    v3.x = vz.x; v3.y = vz.y; v3.z = vz.z;                                elseif lambda2 == lambda.z                                    v1.x = vy.x; v1.y = vy.y; v1.z = vy.z;                                    v2.x = vz.x; v2.y = vz.y; v2.z = vz.z;                                    v3.x = vx.x; v3.y = vx.y; v3.z = vx.z;                                end                            elseif lambda1 == lambda.z                                            if lambda2 == lambda.x                                    v1.x = vz.x; v1.y = vz.y; v1.z = vz.z;                                    v2.x = vx.x; v2.y = vx.y; v2.z = vx.z;                                    v3.x = vy.x; v3.y = vy.y; v3.z = vy.z;                                elseif lambda2 == lambda.y                                    v1.x = vz.x; v1.y = vz.y; v1.z = vz.z;                                    v2.x = vy.x; v2.y = vy.y; v2.z = vy.z;                                    v3.x = vx.x; v3.y = vx.y; v3.z = vx.z;                                end                            end                            Images.S0(ni,nj) = S0;                            Images.lambda.x(ni,nj) = lambda.x;                            Images.lambda.y(ni,nj) = lambda.y;                            Images.lambda.z(ni,nj) = lambda.z;                            Images.A.alpha(ni,nj) = A.alpha;                            Images.A.beta(ni,nj) = A.beta;                            Images.A.gamma(ni,nj) = A.gamma;                            Images.Dxx(ni,nj) = DT_LF(1,1);                            Images.Dyy(ni,nj) = DT_LF(2,2);                            Images.Dzz(ni,nj) = DT_LF(3,3);                            Images.lambda1(ni,nj) = lambda1;                            Images.lambda2(ni,nj) = lambda2;                            Images.lambda3(ni,nj) = lambda3;                            Images.v1.x(ni,nj) = v1.x; Images.v1.y(ni,nj) = v1.y; Images.v1.z(ni,nj) = v1.z;                            Images.v2.x(ni,nj) = v2.x; Images.v2.y(ni,nj) = v2.y; Images.v2.z(ni,nj) = v2.z;                            Images.v3.x(ni,nj) = v3.x; Images.v3.y(ni,nj) = v3.y; Images.v3.z(ni,nj) = v3.z;                       end                                      end                end                Images.ADC = 1/3*(Images.lambda1+Images.lambda2+Images.lambda3);                Images.FA = sqrt(1/2)*sqrt((Images.lambda1-Images.lambda2).^2+(Images.lambda1-Images.lambda3).^2+(Images.lambda2-Images.lambda3).^2)...                    ./sqrt(Images.lambda1.^2+Images.lambda2.^2+Images.lambda3.^2);                Images.FA(find(isnan(Images.FA)==1)) = 0;                Images.CL = (Images.lambda1 - Images.lambda2)./Images.lambda1;                Images.CL(find(isnan(Images.CL)==1)) = 0;                Images.CP = (Images.lambda2 - Images.lambda3)./Images.lambda1;                Images.CP(find(isnan(Images.CP)==1)) = 0;                eval(['save ' num2str(expno(nexp)) '/Images Images r'])            else                eval(['load ' num2str(expno(nexp)) '/Images'])            end            %%            %Images.Dxyz.r = sqrt(Images.Dxx.^2 + Images.Dyy.^2 + Images.Dzz.^2);            Images.Dxyz.r = Images.lambda1;            Images.Dxyz.x = Images.Dxx./Images.Dxyz.r;            Images.Dxyz.y = Images.Dyy./Images.Dxyz.r;            Images.Dxyz.z = Images.Dzz./Images.Dxyz.r;                        ADCmax = max(reshape(Images.ADC,numel(Images.ADC),1));            Dmax = max([max(reshape(Images.Dxx,numel(Images.ADC),1)) max(reshape(Images.Dyy,numel(Images.ADC),1)) max(reshape(Images.Dzz,numel(Images.ADC),1))]);            ADCmax = 2e-9;            Dmax = 2e-9;                        figure(3), clf            colormap('gray')            axes('position',[.1 .6 .3 .35])            Iplot = squeeze(Images.S0(:,:)/Imax);            clim = [0 1];            imagesc(r.i*1e3,r.j*1e3,Iplot',clim)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('S0')            %colorbar            axes('position',[.4 .6 .3 .35])            Iplot = squeeze(Images.ADC(:,:));            clim = [0 ADCmax];            imagesc(r.i*1e3,r.j*1e3,Iplot',clim)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('ADC')            %colorbar            axes('position',[.7 .6 .3 .35])            Iplot = zeros(nudim.j,nudim.i,3);%             Iplot(:,:,1) = squeeze(Images.Dxx(:,:))'/Dmax;%             Iplot(:,:,2) = squeeze(Images.Dyy(:,:))'/Dmax;%             Iplot(:,:,3) = squeeze(Images.Dzz(:,:))'/Dmax;            Iplot(:,:,1) = (Images.FA.*Images.Dxyz.x)';            Iplot(:,:,2) = (Images.FA.*Images.Dxyz.y)';            Iplot(:,:,3) = (Images.FA.*Images.Dxyz.z)';%             Iplot(:,:,1) = (Images.FA.*(1-Images.Dxyz.x))';%             Iplot(:,:,2) = (Images.FA.*(1-Images.Dxyz.y))';%             Iplot(:,:,3) = (Images.FA.*(1-Images.Dxyz.z))';            Iplot(find(Iplot>1)) = 1;            Iplot(find(Iplot<0)) = 0;            imagesc(r.i*1e3,r.j*1e3,Iplot)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('Dxx,Dyy,Dzz')            axes('position',[.1 .1 .3 .35])            Iplot = squeeze(Images.FA(:,:));            clim = [0 1];            imagesc(r.i*1e3,r.j*1e3,Iplot',clim)            set(gca,'YDir','normal')            axis equal, axis tight            xlabel('read / mm'), ylabel('phase / mm')            title(['FA max = ' num2str(max(max(Images.FA)),2)])            %colorbar            axes('position',[.4 .1 .3 .35])            Iplot = squeeze(Images.CP(:,:));            clim = [0 1];            imagesc(r.i*1e3,r.j*1e3,Iplot',clim)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('CP')            %colorbar            axes('position',[.7 .1 .3 .35])            Iplot = squeeze(Images.CL(:,:));            clim = [0 1];            imagesc(r.i*1e3,r.j*1e3,Iplot',clim)            set(gca,'YDir','normal')            axis equal, axis tight, axis off            title('CL')            %colorbar%%            delete([num2str(expno(nexp)) '/ReportFig*'])            delete([num2str(expno(nexp)) '/acqu*sconv'])            delete([num2str(expno(nexp)) '/*Dat.mat'])            delete([num2str(expno(nexp)) '/*.jpg'])            eval(['print ' num2str(expno(nexp)) '/ReportFig -loose -depsc'])        end    end    cd ..endcd(wd)