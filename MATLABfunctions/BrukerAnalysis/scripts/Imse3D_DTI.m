clear allwd = cd;DataDir = '/Users/daniel/NMRdata/AVII500/DT';%DataDir = '/Users/daniel/NMRdata/AVII500/';%DataDir = '/opt/topspin2/data/DT/nmr';%DataDir = '/Users/daniel/Dropbox';%DataDir = '/Users/daniel/Documents/Spaces/Presentations';cd(DataDir)%ExpNam = {'imse3d_test'}; %expno = 27;% ExpNam = {'AOToct3'}; expno = 8;%ExpNam = {'AOToct4'}; expno = 11;%ExpNam = {'Tissue_qVAS'}; expno = 12;%ExpNam = {'AOToct5'}; expno = 11;%ExpNam = {'C14E5'}; expno = [5 22 75 161 191 293 300:322 324:341]; expno = 341;%ExpNam = {'C14E5_2'}; expno = [4 7:8]; expno = 7:8;%ExpNam = {'C14E5_3'}; expno = [6]; expno = 25;%ExpNam = {'C14E5_4'}; expno = 4;%ExpNam = {'C14E5_5'}; expno = 9;%ExpNam = {'RandSampDR1R2'}; expno = 35;%ExpNam = {'AOToct8'}; expno = 14;%ExpNam = {'AOToct9'}; expno = 14;%ExpNam = {'C14E5_6'};ExpNam = {'C14E5_7'};%GetExpnams%lb = 300e-6; si = 64; six = 16; siy = 32;lb = 150e-6; si = 128; six = 32; siy = six;%lb = 150e-6; si = 256; six = 64; siy = six;%lb = 75e-6; si = 512; six = 128; siy = six;td1start = 1;td1end = 16;thresh = .1;LoadSer = 1;MakeFit = 1;CheckThresh = 0;fs = 15;for ndir = 1:length(ExpNam)    ExpNam{ndir}    cd(ExpNam{ndir})    if exist('expno') == 0        GetExpnos    end    fontsize = 15;    for nexp = 1:length(expno)        ConvertAcqus = 'Y';    ConvertProcs = 'N';    MakeTextfile = 'N';        if exist([num2str(expno(nexp)) '/NMRacqus.mat']) == 0            ConvertAcqus = 'Y';        end        res = fExpnoInfo2(ConvertAcqus,MakeTextfile,ConvertProcs,expno(nexp));        eval(['load ' num2str(expno(nexp)) '/NMRacqus'])        if all([strcmp('DT_bppgstedtimse3d',NMRacqus.pulprog); exist([num2str(expno(nexp)) '/ser'])])            if LoadSer                IMSE3Dtd1                Itd1 = abs(Itd1);                figure(3), clf                clim = [0 1];                for ntd1 = 1:tdim.td1                    axes('position',[(ntd1-1)/tdim.td1 0 1/tdim.td1 .7])                    Iplot = squeeze(Itd1(:,:,nudim.x/2+1,ntd1));                    imagesc(r.x*1e3,r.z*1e3,Iplot/Imax,clim)                    colormap('hot')                    axis equal, axis tight, axis off                    set(gca,'YDir','normal')                    axes('position',[(ntd1-1)/tdim.td1 .72 1/tdim.td1 .2])                    Iplot = squeeze(Itd1(nudim.z/2+1,:,:,ntd1));                    imagesc(r.x*1e3,r.y*1e3,Iplot/Imax,clim)                    colormap('hot')                    axis equal, axis tight, axis off                    set(gca,'YDir','normal')                    title(num2str(ntd1))                end                clear Iplot            end            if MakeFit                fid = fopen([num2str(expno(nexp)) '/difframp_x.txt']);                difframp.x = fscanf(fid,'%f');                fclose(fid);                fid = fopen([num2str(expno(nexp)) '/difframp_y.txt']);                difframp.y = fscanf(fid,'%f');                fclose(fid);                fid = fopen([num2str(expno(nexp)) '/difframp_z.txt']);                difframp.z = fscanf(fid,'%f');                fclose(fid);                G.x = difframp.x*Gmax.*NMRacqus.cnst1/100;                G.y = difframp.y*Gmax.*NMRacqus.cnst2/100;                G.z = difframp.z*Gmax.*NMRacqus.cnst3/100;                G.r = sqrt(G.x.^2 + G.y.^2 + G.z.^2);                Gnorm.x = G.x./G.r;                Gnorm.y = G.y./G.r;                Gnorm.z = G.z./G.r;                if any(strcmp(NMRacqus.pulprog,{'DT_bppgstedtimse3d'})) == 1                    epsilon = NMRacqus.d2;                    delta = 2*(NMRacqus.d2 + NMRacqus.d3);                    Delta = 2*NMRacqus.d2 + 2*NMRacqus.d3 + 2*NMRacqus.d4 + 2*NMRacqus.d6...                        + NMRacqus.d5 + 2*1e-6*NMRacqus.p1 + 1e-6*NMRacqus.p2;                                if NMRacqus.l11                        Delta = Delta + NMRacqus.d46 + 2*NMRacqus.d42 + NMRacqus.d43;                    end                    tau = 2*NMRacqus.d4 + 1e-6*NMRacqus.p2;                    tdiff = Delta-delta/3-tau/2-epsilon/2-epsilon^2/6/delta+epsilon^3/15/delta^2;                    q = gamma*G.r*delta/2/pi;                    b = (2*pi*q).^2*tdiff;                end                Imask = zeros(nudim.z,nudim.y,nudim.x);                I1 = abs(squeeze(Itd1(:,:,:,td1start)));                Imask(find(I1>Imax*thresh)) = 1;                                figure(1), clf                colormap('gray')                ny = length(r.y)/2 + 1;                Iplot = squeeze(Imask(:,ny,:));                axh1 = axes('position',[.07 .1 .2 .9],'FontSize',fs);                imagesc(r.x*1e3,r.z*1e3,Iplot)                set(gca,'YDir','normal')                axis equal, axis tight                ylabel('\itz\rm / mm'), xlabel('\itx\rm / mm')                hold on                nx = length(r.x)/2 + 1;                axes('position',[.28 .1 .2 .9],'FontSize',fs)                Iplot = squeeze(Imask(:,:,nx));                imagesc(r.y*1e3,r.z*1e3,Iplot)                set(gca,'YDir','normal','YTick',[])                axis equal, axis tight                xlabel('\ity\rm / mm')                Nslices = 4^2;                slices = round(length(r.z)*linspace(0,1,Nslices+2)); slices([1 Nslices+2]) = [];                width = .5/sqrt(Nslices);                height = 11/8.5*.5/sqrt(Nslices);                nslice = 1;                for county = 1:sqrt(Nslices)                    for countx = 1:sqrt(Nslices)                        axes('position',[1-countx*width .2+(county-1)*height 1.01*width 1.01*height])                        nz = slices(nslice);                        Iplot = squeeze(Imask(nz,:,:));                        imagesc(r.x*1e3,r.y*1e3,Iplot)                        set(gca,'YDir','normal','YTick',[])                        axis tight, axis off                        nslice = nslice+1;                    end                end                pause(1)                                if CheckThresh                    return                end                                Images_S0 = zeros(nudim.z,nudim.y,nudim.x);                Images_lambda_x = zeros(nudim.z,nudim.y,nudim.x);                Images_lambda_y = zeros(nudim.z,nudim.y,nudim.x);                Images_lambda_z = zeros(nudim.z,nudim.y,nudim.x);                Images_A_alpha = zeros(nudim.z,nudim.y,nudim.x);                Images_A_beta = zeros(nudim.z,nudim.y,nudim.x);                Images_A_gamma = zeros(nudim.z,nudim.y,nudim.x);                Images_Dxx = zeros(nudim.z,nudim.y,nudim.x);                Images_Dyy = zeros(nudim.z,nudim.y,nudim.x);                Images_Dzz = zeros(nudim.z,nudim.y,nudim.x);                Images_lambda1 = zeros(nudim.z,nudim.y,nudim.x);                Images_lambda2 = zeros(nudim.z,nudim.y,nudim.x);                Images_lambda3 = zeros(nudim.z,nudim.y,nudim.x);                Images_v1_x = zeros(nudim.z,nudim.y,nudim.x); Images_v1_y = zeros(nudim.z,nudim.y,nudim.x); Images_v1_z = zeros(nudim.z,nudim.y,nudim.x);                Images_v2_x = zeros(nudim.z,nudim.y,nudim.x); Images_v2_y = zeros(nudim.z,nudim.y,nudim.x); Images_v2_z = zeros(nudim.z,nudim.y,nudim.x);                Images_v3_x = zeros(nudim.z,nudim.y,nudim.x); Images_v3_y = zeros(nudim.z,nudim.y,nudim.x); Images_v3_z = zeros(nudim.z,nudim.y,nudim.x);                nudim_x = nudim.x; nudim_y = nudim.y; nudim_z = nudim.z;                r_x = r.x; r_y = r.y; r_z = r.z;                Gnorm_x = Gnorm.x; Gnorm_y = Gnorm.y; Gnorm_z = Gnorm.z;                options = optimset('MaxFunEvals',1e3,'Display','off');                tic%                 for nz = 1:nudim.z%                     plot(axh1,1e3*[min(r.x); max(r.x)],r.z(nz)*1e3*[1; 1],'-b')%                     pause(.1)                parfor nz = 1:nudim_z                    nz                for ny = 1:nudim_y                for nx = 1:nudim_x                    points = td1start:min([tdim.td1 td1end]);                                       Yin = squeeze(Itd1(nz,ny,nx,points));                    Xin = b(points);                    Gnormpoints = [Gnorm_x(points) Gnorm_y(points) Gnorm_z(points)];                    %figure(1), clf, plot(points,Yin,'-o'), return                    Pin = [Yin(1)   1e-9 .3e-9 .1e-9 2*pi 2*pi 2*pi]; Funam = 'fexpDTIpar';                    LB = [0 1e-11*[1 1 1] 0 0 0]; UB = [2*Yin(1) 10e-9*[1 1 1] 4*pi 4*pi 4*pi];                    if Yin(1)>Imax*thresh                        Pout = Pin; Ynorm = mean(Yin); Xnorm = mean(Xin); Pnorm = Pin;                         [Pout,resnorm,residual,exitflag,output] = lsqcurvefit(Funam,Pin./Pnorm,Xin/Xnorm,Yin/Ynorm,LB./Pnorm,UB./Pnorm,options,Pnorm,Xnorm,Ynorm,Gnormpoints);                        Pout = Pout.*Pnorm;                        Ycalc = feval(Funam,Pout,Xin,ones(size(Pin)),1,1,Gnormpoints); error = Yin - Ycalc;                        %return                        %figure(2), clf, plot(points,Yin,'o',points,Ycalc,'-'), title(num2str(nz)); Pout', pause(.1)                        %return                        S0 = Pout(1);                        lambda_x = Pout(2);                        lambda_y = Pout(3);                        lambda_z = Pout(4);                        A_alpha = angle(exp(i*Pout(5)));                        A_beta = angle(exp(i*Pout(6)));                        A_gamma = angle(exp(i*Pout(7)));                        R_gamma = [                            cos(A_gamma) sin(A_gamma) 0                            -sin(A_gamma) cos(A_gamma) 0                            0 0 1];                        R_beta = [                            cos(A_beta) 0 -sin(A_beta)                            0 1 0                            sin(A_beta) 0 cos(A_beta)];                        R_alpha = [                            cos(A_alpha) sin(A_alpha) 0                            -sin(A_alpha) cos(A_alpha) 0                            0 0 1];                        R_mat = R_gamma*R_beta*R_alpha;                        R_inv = inv(R_mat);                        DT_PAS = [                            lambda_x 0 0                            0 lambda_y 0                            0 0 lambda_z];                        DT_LF = R_mat*DT_PAS*R_inv;                        lambdas = [lambda_x lambda_y lambda_z];                        [lambdas,index] = sort(lambdas,2,'descend');                        lambda1 = lambdas(1);                        lambda2 = lambdas(2);                        lambda3 = lambdas(3);                        vx_x = R_mat(1,1); vx_y = R_mat(2,1); vx_z = R_mat(3,1);                        vy_x = R_mat(1,2); vy_y = R_mat(2,2); vy_z = R_mat(3,2);                        vz_x = R_mat(1,3); vz_y = R_mat(2,3); vz_z = R_mat(3,3);                        if lambda1 == lambda_x                                        if lambda2 == lambda_y                                v1_x = vx_x; v1_y = vx_y; v1_z = vx_z;                                v2_x = vy_x; v2_y = vy_y; v2_z = vy_z;                                v3_x = vz_x; v3_y = vz_y; v3_z = vz_z;                            elseif lambda2 == lambda_z                                v1_x = vx_x; v1_y = vx_y; v1_z = vx_z;                                v2_x = vz_x; v2_y = vz_y; v2_z = vz_z;                                v3_x = vy_x; v3_y = vy_y; v3_z = vy_z;                            end                        elseif lambda1 == lambda_y                                        if lambda2 == lambda_x                                v1_x = vy_x; v1_y = vy_y; v1_z = vy_z;                                v2_x = vx_x; v2_y = vx_y; v2_z = vx_z;                                v3_x = vz_x; v3_y = vz_y; v3_z = vz_z;                            elseif lambda2 == lambda_z                                v1_x = vy_x; v1_y = vy_y; v1_z = vy_z;                                v2_x = vz_x; v2_y = vz_y; v2_z = vz_z;                                v3_x = vx_x; v3_y = vx_y; v3_z = vx_z;                            end                        elseif lambda1 == lambda_z                                        if lambda2 == lambda_x                                v1_x = vz_x; v1_y = vz_y; v1_z = vz_z;                                v2_x = vx_x; v2_y = vx_y; v2_z = vx_z;                                v3_x = vy_x; v3_y = vy_y; v3_z = vy_z;                            elseif lambda2 == lambda_y                                v1_x = vz_x; v1_y = vz_y; v1_z = vz_z;                                v2_x = vy_x; v2_y = vy_y; v2_z = vy_z;                                v3_x = vx_x; v3_y = vx_y; v3_z = vx_z;                            end                        end                        Images_S0(nz,ny,nx) = S0;                        Images_lambda_x(nz,ny,nx) = lambda_x;                        Images_lambda_y(nz,ny,nx) = lambda_y;                        Images_lambda_z(nz,ny,nx) = lambda_z;                        Images_A_alpha(nz,ny,nx) = A_alpha;                        Images_A_beta(nz,ny,nx) = A_beta;                        Images_A_gamma(nz,ny,nx) = A_gamma;                        Images_Dxx(nz,ny,nx) = DT_LF(1,1);                        Images_Dyy(nz,ny,nx) = DT_LF(2,2);                        Images_Dzz(nz,ny,nx) = DT_LF(3,3);                        Images_lambda1(nz,ny,nx) = lambda1;                        Images_lambda2(nz,ny,nx) = lambda2;                        Images_lambda3(nz,ny,nx) = lambda3;                        Images_v1_x(nz,ny,nx) = v1_x; Images_v1_y(nz,ny,nx) = v1_y; Images_v1_z(nz,ny,nx) = v1_z;                        Images_v2_x(nz,ny,nx) = v2_x; Images_v2_y(nz,ny,nx) = v2_y; Images_v2_z(nz,ny,nx) = v2_z;                        Images_v3_x(nz,ny,nx) = v3_x; Images_v3_y(nz,ny,nx) = v3_y; Images_v3_z(nz,ny,nx) = v3_z;                    end            %%                end                end                end                toc                Images.S0 = Images_S0;                Images.lambda.x = Images_lambda_x;                Images.lambda.y = Images_lambda_y;                Images.lambda.z = Images_lambda_z;                Images.A.alpha = Images_A_alpha;                Images.A.beta = Images_A_beta;                Images.A.gamma = Images_A_gamma;                Images.Dxx = Images_Dxx;                Images.Dyy = Images_Dyy;                Images.Dzz = Images_Dzz;                Images.lambda1 = Images_lambda1;                Images.lambda2 = Images_lambda2;                Images.lambda3 = Images_lambda3;                Images.v1.x = Images_v1_x; Images.v1.y = Images_v1_y; Images.v1.z = Images_v1_z;                Images.v2.x = Images_v2_x; Images.v2.y = Images_v2_y; Images.v2.z = Images_v2_z;                Images.v3.x = Images_v3_x; Images.v3.y = Images_v3_y; Images.v3.z = Images_v3_z;                                Images.ADC = 1/3*(Images.lambda1+Images.lambda2+Images.lambda3);                Images.FA = sqrt(1/2)*sqrt((Images.lambda1-Images.lambda2).^2+(Images.lambda1-Images.lambda3).^2+(Images.lambda2-Images.lambda3).^2)...                    ./sqrt(Images.lambda1.^2+Images.lambda2.^2+Images.lambda3.^2);                Images.FA(find(isnan(Images.FA)==1)) = 0;                Images.CL = (Images.lambda1 - Images.lambda2)./Images.lambda1;                Images.CL(find(isnan(Images.CL)==1)) = 0;                Images.CP = (Images.lambda2 - Images.lambda3)./Images.lambda1;                Images.CP(find(isnan(Images.CP)==1)) = 0;                eval(['save ' num2str(expno(nexp)) '/Images Images r'])            end                                            if exist([num2str(expno(nexp)) '/Images.mat'])                eval(['load ' num2str(expno(nexp)) '/Images'])                 Imax = max(reshape(Images.S0,numel(Images.S0),1));                %ADCmax = max(reshape(Images.ADC,numel(Images.ADC),1));                %ADCmax = 2e-9;                %Dmax = max([max(reshape(Images.Dxx,numel(Images.ADC),1)) max(reshape(Images.Dyy,numel(Images.ADC),1)) max(reshape(Images.Dzz,numel(Images.ADC),1))]);                ADCmax = 1.5*sum(sum(sum((Images.S0.*Images.ADC),1),2),3)/sum(sum(sum((Images.S0),1),2),3);                Dmax = 2*ADCmax;%                 colormap('default')%                 colormap('hot')%                 hot = colormap;%                 cool = [hot(:,3) hot(:,2) hot(:,1)];%                 hotcool = [flipud(cool); hot];%                 colormap(hotcool)                nz = length(r.z)/2+1;                ny = length(r.y)/2+1;                figure(1), clf                colormap('gray')                axes('position',[.1 .1 .12 .7])                Iplot = squeeze(Images.S0(:,ny,:)/Imax);                clim = [0 1];                imagesc(r.x*1e3,r.z*1e3,Iplot,clim)                set(gca,'YDir','normal')                axis equal, axis tight                ylabel('z / mm'), xlabel('x / mm')                axes('position',[.1 .77 .12 .2])                Iplot = squeeze(Images.S0(nz,:,:)/Imax);                imagesc(r.x*1e3,r.y*1e3,Iplot,clim)                set(gca,'YDir','normal','XTick',[])                axis equal, axis tight                ylabel('y / mm')                title('S0')                axes('position',[.25 .1 .12 .7])                Iplot = squeeze(Images.ADC(:,ny,:)/ADCmax);                imagesc(r.x*1e3,r.z*1e3,Iplot,clim)                set(gca,'YDir','normal')                axis equal, axis tight, axis off                axes('position',[.25 .77 .12 .2])                Iplot = squeeze(Images.ADC(nz,:,:)/ADCmax);                imagesc(r.x*1e3,r.y*1e3,Iplot,clim)                set(gca,'YDir','normal')                axis equal, axis tight, axis off                title('ADC')                axes('position',[.4 .1 .12 .7])                Iplot = squeeze(Images.FA(:,ny,:));                imagesc(r.x*1e3,r.z*1e3,Iplot,clim)                set(gca,'YDir','normal')                axis equal, axis tight, axis off                axes('position',[.4 .77 .12 .2])                Iplot = squeeze(Images.FA(nz,:,:));                imagesc(r.x*1e3,r.y*1e3,Iplot,clim)                set(gca,'YDir','normal')                axis equal, axis tight, axis off                title('FA')                axes('position',[.55 .1 .12 .7])                Iplot = zeros(length(r.z),length(r.x),3);                Iplot(:,:,1) = squeeze(Images.CL(:,ny,:)).*abs(squeeze(Images.v1.x(:,ny,:)));                Iplot(:,:,2) = squeeze(Images.CL(:,ny,:)).*abs(squeeze(Images.v1.y(:,ny,:)));                Iplot(:,:,3) = squeeze(Images.CL(:,ny,:)).*abs(squeeze(Images.v1.z(:,ny,:)));                %Iplot = squeeze(Images.CL(:,ny,:));                imagesc(r.x*1e3,r.z*1e3,Iplot)                set(gca,'YDir','normal')                axis equal, axis tight, axis off                axes('position',[.55 .77 .12 .2])                Iplot = zeros(length(r.y),length(r.x),3);                Iplot(:,:,1) = (squeeze(Images.CL(nz,:,:)).*abs(squeeze(Images.v1.x(nz,:,:))));                Iplot(:,:,2) = (squeeze(Images.CL(nz,:,:)).*abs(squeeze(Images.v1.y(nz,:,:))));                Iplot(:,:,3) = (squeeze(Images.CL(nz,:,:)).*abs(squeeze(Images.v1.z(nz,:,:))));                %Iplot = squeeze(Images.CL(nz,:,:))';                imagesc(r.x*1e3,r.y*1e3,Iplot)                set(gca,'YDir','normal')                axis equal, axis tight, axis off                title('CL')                axes('position',[.7 .1 .12 .7])                Iplot = squeeze(Images.CP(:,ny,:));                imagesc(r.y*1e3,r.z*1e3,Iplot,clim)                Iplot = zeros(length(r.z),length(r.x),3);                Iplot(:,:,1) = squeeze(Images.CP(:,ny,:)).*abs(squeeze(Images.v3.x(:,ny,:)));                Iplot(:,:,2) = squeeze(Images.CP(:,ny,:)).*abs(squeeze(Images.v3.y(:,ny,:)));                Iplot(:,:,3) = squeeze(Images.CP(:,ny,:)).*abs(squeeze(Images.v3.z(:,ny,:)));                %Iplot = squeeze(Images.CP(:,ny,:));                imagesc(r.x*1e3,r.z*1e3,Iplot)                set(gca,'YDir','normal')                axis equal, axis tight, axis off                axes('position',[.7 .77 .12 .2])                Iplot = squeeze(Images.CP(nz,:,:));                imagesc(r.y*1e3,r.x*1e3,Iplot,clim)                Iplot = zeros(length(r.y),length(r.x),3);                Iplot(:,:,1) = (squeeze(Images.CP(nz,:,:)).*abs(squeeze(Images.v3.x(nz,:,:))));                Iplot(:,:,2) = (squeeze(Images.CP(nz,:,:)).*abs(squeeze(Images.v3.y(nz,:,:))));                Iplot(:,:,3) = (squeeze(Images.CP(nz,:,:)).*abs(squeeze(Images.v3.z(nz,:,:))));                %Iplot = squeeze(Images.CP(nz,:,:));                imagesc(r.x*1e3,r.y*1e3,Iplot)                set(gca,'YDir','normal')                axis equal, axis tight, axis off                title('CP')                colormap(gray(256))                axes('position',[.85 .1 .12 .7])                Iplot = zeros(length(r.z),length(r.x),3);                Iplot(:,:,1) = squeeze(Images.Dxx(:,ny,:))/Dmax;                Iplot(:,:,2) = squeeze(Images.Dyy(:,ny,:))/Dmax;                Iplot(:,:,3) = squeeze(Images.Dzz(:,ny,:))/Dmax;                imagesc(r.x*1e3,r.z*1e3,Iplot)                set(gca,'YDir','normal')                axis equal, axis tight, axis off                axes('position',[.85 .77 .12 .2])                Iplot = squeeze(Images.CP(nz,:,:));                imagesc(r.x*1e3,r.y*1e3,Iplot,clim)                Iplot = zeros(length(r.y),length(r.x),3);                Iplot(:,:,1) = squeeze(Images.Dxx(nz,:,:))/Dmax;                Iplot(:,:,2) = squeeze(Images.Dyy(nz,:,:))/Dmax;                Iplot(:,:,3) = squeeze(Images.Dzz(nz,:,:))/Dmax;                imagesc(r.x*1e3,r.y*1e3,Iplot)                set(gca,'YDir','normal')                axis equal, axis tight, axis off                title('Dxx,Dyy,Dzz')                delete([num2str(expno(nexp)) '/ReportFig.*'])                delete([num2str(expno(nexp)) '/acqu*sconv'])                delete([num2str(expno(nexp)) '/*Dat.mat'])                delete([num2str(expno(nexp)) '/*.jpg'])                set(gcf, 'PaperPosition', [0 0 11 8.5],'PaperSize', [11 8.5]);                 eval(['print ' num2str(expno(nexp)) '/ReportFig -loose -dpdf'])            end        end    end    cd ..endcd(wd)