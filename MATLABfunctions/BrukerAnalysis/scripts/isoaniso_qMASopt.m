clear allwd = cd;DataDir = '/Users/daniel/NMRdata/AVII500/DT/';%DataDir = '/opt/topspin2/data/DT/nmr';cd(DataDir) ExpNam = {'isoaniso_test'}; expno = 85;ExpNam = {'isoanisocorr_qMASopt'}; expno = 7;basl = [.03 .2 .8 .97]; lb = 20; si = 4*1024;%ll = 1959; ul = 2307;AutoPhase = 1;AutoPhaseAll = 0;CheckBasline = 0;FindPeaks = 1;CheckPeaks = 0;PlotInterm = 0;thresh = .25;td1start = 2;signal = 'area';cd(ExpNam{1})if exist('expno') == 0    GetExpnosendfor nexp = 1:length(expno)    ConvertAcqus = 'Y';    ConvertProcs = 'N';    MakeTextfile = 'N';    if exist([num2str(expno(nexp)) '/NMRacqus.mat']) == 0        ConvertAcqus = 'Y';    end    res = fExpnoInfo2(ConvertAcqus,MakeTextfile,ConvertProcs,expno(nexp));    eval(['load ' num2str(expno(nexp)) '/NMRacqus'])    if any(strcmp(NMRacqus.pulprog,{'DT_pgseisoaniso','DT_isoanisoqMASopt'})) == 1        Spec2Dtd1        if AutoPhaseAll            AutoPhasetd1        end        PeakPick                %%        figure(1), clf, plot(1:NMRacqu2s.td,PP.Apeak(:,1),'o')%%                gamma = 26.75e7;        if strcmp(NMRacqus.nuc1,'2H') == 1            gamma = 4.1065e7;        elseif strcmp(NMRacqus.nuc1,'23Na') == 1            gamma = 7.0761e7;        end        Gmax = 3;        if any(strcmp(NMRacqus.probhd,{'5 mm BBO BB-1H/D XYZ-GRD Z107255/0001',...                '5 mm TXI 1H/D-13C/15N XYZ-GRD Z8588/0006'})) == 1            Gmax = 0.5;        end        fid = fopen([num2str(expno(nexp)) '/rx.txt']);        ramp.x = fscanf(fid,'%f');        fclose(fid);        fid = fopen([num2str(expno(nexp)) '/ry.txt']);        ramp.y = fscanf(fid,'%f');        fclose(fid);        fid = fopen([num2str(expno(nexp)) '/rz.txt']);        ramp.z = fscanf(fid,'%f');        fclose(fid);        fid = fopen([num2str(expno(nexp)) '/riso.txt']);        ramp.iso = fscanf(fid,'%f');        fclose(fid);        fid = fopen([num2str(expno(nexp)) '/rx1.txt']);        ramp1.x = fscanf(fid,'%f');        fclose(fid);        fid = fopen([num2str(expno(nexp)) '/ry1.txt']);        ramp1.y = fscanf(fid,'%f');        fclose(fid);        fid = fopen([num2str(expno(nexp)) '/rz1.txt']);        ramp1.z = fscanf(fid,'%f');        fclose(fid);        fid = fopen([num2str(expno(nexp)) '/riso1.txt']);        ramp1.iso = fscanf(fid,'%f');        fclose(fid);                                G.x = ramp.x*Gmax.*NMRacqus.cnst1/100;        G.y = 1.00*ramp.y*Gmax.*NMRacqus.cnst2/100;        G.z = 1.07*ramp.z*Gmax.*NMRacqus.cnst3/100;        G.r = sqrt(G.x.^2 + G.y.^2 + G.z.^2);        G.iso = 1.02*ramp.iso*Gmax.*NMRacqus.cnst1/100;        Gnorm.x = G.x./G.r; Gnorm.x(G.r==0) = 0;        Gnorm.y = G.y./G.r; Gnorm.y(G.r==0) = 0;        Gnorm.z = G.z./G.r; Gnorm.z(G.r==0) = 0;        G1.x = ramp1.x*Gmax.*NMRacqus.cnst1/100;        G1.y = ramp1.y*Gmax.*NMRacqus.cnst2/100;        G1.z = 1.07*ramp1.z*Gmax.*NMRacqus.cnst3/100;        G1.r = sqrt(G1.x.^2 + G1.y.^2 + G1.z.^2);        G1.iso = 1.02*ramp1.iso*Gmax.*NMRacqus.cnst1/100;        Gnorm1.x = G1.x./G1.r; Gnorm1.x(G1.r==0) = 0;        Gnorm1.y = G1.y./G1.r; Gnorm1.y(G1.r==0) = 0;        Gnorm1.z = G1.z./G1.r; Gnorm1.z(G1.r==0) = 0;        %%        figure(1), clf        subplot(2,1,1)        plot(1:td1,G.x,'ro',1:td1,G.y,'go',1:td1,G.z,'bo',1:td1,G.iso,'ko')        subplot(2,1,2)        plot(1:td1,G1.x,'rs',1:td1,G1.y,'gs',1:td1,G1.z,'bs',1:td1,G1.iso,'ks')        %%                fid = fopen([num2str(expno(nexp)) '/qMASx.txt']);        Gmod.x = fscanf(fid,'%f');        fclose(fid);        fid = fopen([num2str(expno(nexp)) '/qMASy.txt']);        Gmod.y = fscanf(fid,'%f');        fclose(fid);        fid = fopen([num2str(expno(nexp)) '/qMASz.txt']);        Gmod.z = fscanf(fid,'%f');        fclose(fid);        fid = fopen([num2str(expno(nexp)) '/qMASr.txt']);        Gmod.r = fscanf(fid,'%f');        fclose(fid);                Ndt = length(Gmod.x);        figure(1), clf, plot(1:Ndt,Gmod.x,'-r',1:Ndt,Gmod.y,'-g',1:Ndt,Gmod.z,'-b',1:Ndt,Gmod.r,'-k')                tau = NMRacqus.d3;        dt = tau/Ndt;        F.r = cumsum(Gmod.r*dt);        bred.r = sum(F.r.^2*dt);                F.x = cumsum(Gmod.x*dt);        F.y = cumsum(Gmod.y*dt);        F.z = cumsum(Gmod.z*dt);        F.iso = sqrt(F.x.^2 + F.y.^2 + F.z.^2);        bred.iso = sum(F.iso.^2*dt);        b = 2*bred.iso*gamma^2*(G.r + G.iso).^2;        b1 = 2*bred.iso*gamma^2*(G1.r + G1.iso).^2;        btot = b+b1;        %%        figure(1), clf        plot(1:td1,btot)        plot(btot,Ipeak,'o')                DW.x = Gnorm.x;        DW.y = Gnorm.y;        DW.z = Gnorm.z;        DW.theta = acos(DW.z);        DW.phi = angle(DW.x + i*DW.y);        %figure(1), clf, plot(DW.phi,DW.theta,'o'), return        DW.Xiso = b1./btot;        DW.btot = btot;        DW.biso = b1;        DW.baniso = b;                S = Apeak(:,1) + Apeak(:,2);        M = td1;                figure(1), clf        semilogy(DW.btot,S,'o')        figure(2), clf        subplot(4,1,1)        plot(1:M,DW.btot,'o')        subplot(4,1,2)        plot(1:M,DW.Xiso,'o')        subplot(4,1,3)        plot(1:M,DW.theta,'o',1:M,DW.phi,'o')                eval(['save ' num2str(expno(nexp)) '/TraceTensorCorrExpDat DW S M'])        PP.X = b;                        index = 0*128 + find(G1.iso == min(G1.iso));        index1 = find(all([G.x == min(G.x), G.y == min(G.y), G.z == min(G.z)],2));                Idat2D = PP.Ipeak(:,2);        Idat2D = PP.Ipeak(:,2) + 1*PP.Ipeak(:,1);        %Idat2D = PP.Ipeak(:,1);        Idat_DT = Idat2D(index,:);        b_DT = b(index);        Idat_iso = Idat2D(index1,:);        b_iso = b1(index1);                Niso = 16;        Ndir = 8;        NG = NMRacqu2s.td/Niso;                        figure(1), clf%         semilogy(b(index),PP.Apeak(index,1),'o')%         hold on %         semilogy(b1(index1),PP.Apeak(index1,1),'ko')        h = semilogy(1:td1,Idat2D,'o');%         h = semilogy(reshape(btot,Niso,NG)',reshape(Idat2D,Niso,NG)','o');%         set(h,{'Marker'},{'o','o','o','o','s','s','s','s','v','v','v','v','x','x','x','x'}')%         set(h,{'Color'},{'k','r','g','b','k','r','g','b','k','r','g','b','k','r','g','b'}')%         semilogy(b_DT,Idat_DT,'o')%         hold on %         semilogy(b_iso,Idat_iso,'ko')%         semilogy(b(index),.5*PP.Ipeak(index,1)+PP.Ipeak(index,2),'o')%         hold on %         semilogy(b1(index1),.5*PP.Ipeak(index1,1)+PP.Ipeak(index1,2),'ko')%%        for niso = 1:Niso            %niso = 1;            points = (niso-1)*Niso*Ndir + find(G1.iso == min(G1.iso));            Yin = squeeze(Idat2D(points,:));            Xin = b(points);            Gnorm_LF.x = Gnorm.x(points); Gnorm_LF.y = Gnorm.y(points); Gnorm_LF.z = Gnorm.z(points);            %figure(1), clf, plot(points,Yin,'o'), return            Pin = [Yin(1)   2e-9 1e-9 .5e-9 2*pi 2*pi 2*pi]; Funam = 'fexpDTI';            Pin = [6.2809e+06   1.5992e-09   3.1758e-10   1.0410e-09   5.8230e+00   4.7576e+00   7.0905e+00];            LB = [0 1e-11 1e-11 1e-11 0 0 0]; UB = [2*Yin(1) 3e-9 3e-9 3e-9 4*pi 4*pi 4*pi];            Pin = [Yin(1)   2e-9 1e-9 .5e-9 2*pi 2*pi 2*pi 1e-10 1e-10 1e-10]; Funam = 'fexpgammaDTI';            Pin = [6.2809e+06   1.5992e-09   3.1758e-10   1.0410e-09   5.8230e+00   4.7576e+00   7.0905e+00 1e-10 3e-10 2e-10];            LB = [0 1e-11 1e-11 1e-11 0 0 0 0 0 0]; UB = [2*Yin(1) 3e-9 3e-9 3e-9 4*pi 4*pi 4*pi 3e-9 3e-9 3e-9];            %if Yin(1)>Imax*thresh            Pout = Pin; Ynorm = mean(Yin); Xnorm = mean(Xin); Pnorm = Pin; Pout = Pout./Pnorm;            [Pout,resnorm,residual,exitflag,output] = lsqcurvefit(Funam,Pin./Pnorm,Xin/Xnorm,Yin/Ynorm,LB./Pnorm,UB./Pnorm,[],Pnorm,Xnorm,Ynorm,Gnorm_LF);            Pout = Pout.*Pnorm;            Yout = feval(Funam,Pout,Xin,ones(size(Pin)),1,1,Gnorm_LF); error = Yin - Yout;            %return            figure(2), clf, semilogy(Xin,Yin,'o',Xin,Yout,'x'), title(num2str(niso));            hold on             semilogy(b_iso,Idat_iso,'-ko')            pause(1)                                    FitDat.Xin(:,niso) = Xin;            FitDat.Yin(:,niso) = Yin;            FitDat.Yout(:,niso) = Yout;            FitDat.Pout(:,niso) = Pout;        end                eval(['save ' num2str(expno(nexp)) '/FitDat PP FitDat'])                    %%        S0 = FitDat.Pout(1,:);        lambda.x = FitDat.Pout(2,:);        lambda.y = FitDat.Pout(3,:);        lambda.z = FitDat.Pout(4,:);        A.alpha = FitDat.Pout(5,:);        A.beta = FitDat.Pout(6,:);        A.gamma = FitDat.Pout(7,:);        sigma.x = FitDat.Pout(8,:);        sigma.y = FitDat.Pout(9,:);        sigma.z = FitDat.Pout(10,:);        lambdas = [lambda.x; lambda.y; lambda.z];        [lambdas, sortindx] = sort(lambdas,1,'descend');        lambda.one = lambdas(1,:);        lambda.two = lambdas(2,:);        lambda.three = lambdas(3,:);        sigmas = [sigma.x; sigma.y; sigma.z];        for niso = 1:Niso, sigmas(:,niso) = sigmas(sortindx(:,niso),niso); end        sigma.one = sigmas(1,:);        sigma.two = sigmas(2,:);        sigma.three = sigmas(3,:);        ADC = 1/3*(lambda.one+lambda.two+lambda.three);        FA = sqrt(1/2)*sqrt((lambda.one-lambda.two).^2+(lambda.one-lambda.three).^2+(lambda.two-lambda.three).^2)...            ./sqrt(lambda.one.^2+lambda.two.^2+lambda.three.^2);        FA(find(isnan(FA)==1)) = 0;        CL = (lambda.one - lambda.two)./lambda.one;        CL(find(isnan(CL)==1)) = 0;        CP = (lambda.two - lambda.three)./lambda.one;        CP(find(isnan(CP)==1)) = 0;                b_isov = reshape(b_iso,Niso,Niso);        b_isov = b_isov(1,:)'/1e9;                lw = 3;        fs = 20;        left = .15;        width = .3;        dheight = .3;        height = .9*dheight;                        figure(1), clf        axh1 = axes('position',[left .99-dheight width height]);        ph1 = semilogy(b_isov,S0/max(S0));        axh2 = axes('position',[left .99-2*dheight width height]);        ph2 = semilogy(b_isov,ADC);        axh3 = axes('position',[left .99-3*dheight width height]);        ph3 = plot(b_isov,FA);        set([axh1 axh2 axh3],'LineWidth',lw,'FontSize',fs,'Box','off','TickDir','out','TickLength',.03*[1 1]);        set([ph1 ph2 ph3],'LineStyle','-','Marker','o','LineWidth',lw,'Color','k')        set(axh1,'YLim',[.1 1.2],'YTick',[.1 1],'YTickLabel',{'0.1';'1'})        set(axh2,'YLim',[.5e-10 2e-9],'YTick',[1e-10 1e-9])        set(axh3,'YLim',[-.1 0.6],'YTick',[0 0.5],'YTickLabel',{'0';'0.5'})        set([axh1 axh2],'XTick',[]);        delete([num2str(expno(nexp)) '/ReportFig.*'])        eval(['print -depsc -loose ' num2str(expno(nexp)) '/ReportFig'])        %%%         subplot(3,1,1)%         plot(b_isov,lambda.one,b_isov,lambda.two,b_isov,lambda.three)%         hold on%         h = plot(b_isov,sigma.one,b_isov,sigma.two,b_isov,sigma.three);%         set(h,'LineStyle','--')%         plot(b_isov,ADC,'-k')%         subplot(3,1,2)%         plot(b_isov,FA,b_isov,CL,b_isov,CP)                DTdat = struct('ADC',ADC,'FA',FA,'CL',CL,'CP',CP,'S0',S0,'lambda',lambda,...            'A',A,'sigma',sigma);        %%        Dmax = 1.5e-9;        EllipseScale = .8;        for niso = 1:Niso            lambda.x = DTdat.lambda.x(niso);            lambda.y = DTdat.lambda.y(niso);            lambda.z = DTdat.lambda.z(niso);            A.alpha = DTdat.A.alpha(niso);            A.beta = DTdat.A.beta(niso);            A.gamma = DTdat.A.gamma(niso);            lambda.one = DTdat.lambda.one(niso);            lambda.two = DTdat.lambda.two(niso);            lambda.three = DTdat.lambda.three(niso);            R.gamma = [            cos(A.gamma) sin(A.gamma) 0            -sin(A.gamma) cos(A.gamma) 0            0 0 1];            R.beta = [            cos(A.beta) 0 -sin(A.beta)            0 1 0            sin(A.beta) 0 cos(A.beta)];            R.alpha = [            cos(A.alpha) sin(A.alpha) 0            -sin(A.alpha) cos(A.alpha) 0            0 0 1];            R.mat = R.gamma*R.beta*R.alpha;            R.inv = inv(R.mat);            DT_PAS = [            lambda.x 0 0            0 lambda.y 0            0 0 lambda.z];            DT_LF = R.mat*DT_PAS*R.inv;            gamma = .9;            Nphi = 100;            Ntheta = Nphi;            phi = linspace(0,pi,Nphi);            theta = linspace(0,2*pi,Ntheta);            [phi,theta] = ndgrid(phi,theta);            cl = (lambda.one-lambda.two)/(lambda.one+lambda.two+lambda.three);            cp = 2*(lambda.two-lambda.three)/(lambda.one+lambda.two+lambda.three);            cs = 3*lambda.three/(lambda.one+lambda.two+lambda.three);            if cl >= cp                alpha = (1-cp)^gamma;                beta = (1-cl)^gamma;                q.x = sign(cos(phi)).*abs(cos(phi)).^beta;                q.y = (-1)*sign(sin(theta)).*abs(sin(theta)).^alpha.*sign(sin(phi)).*abs(sin(phi)).^beta;                q.z = sign(cos(theta)).*abs(cos(theta)).^alpha.*sign(sin(phi)).*abs(sin(phi)).^beta;            elseif cl < cp                alpha = (1-cl)^gamma;                beta = (1-cp)^gamma;                q.x = sign(cos(theta)).*abs(cos(theta)).^alpha.*sign(sin(phi)).*abs(sin(phi)).^beta;                q.y = sign(sin(theta)).*abs(sin(theta)).^alpha.*sign(sin(phi)).*abs(sin(phi)).^beta;                q.z = sign(cos(phi)).*abs(cos(phi)).^beta;            end            if lambda.one == lambda.x                            if lambda.two == lambda.y                    DTsuperquad_PAS.x = -q.x;                    DTsuperquad_PAS.y = q.y;                    DTsuperquad_PAS.z = q.z;                elseif lambda.two == lambda.z                    DTsuperquad_PAS.x = -q.x;                    DTsuperquad_PAS.z = -q.y;                    DTsuperquad_PAS.y = q.z;                end            elseif lambda.one == lambda.y                            if lambda.two == lambda.x                    DTsuperquad_PAS.y = -q.x;                    DTsuperquad_PAS.x = q.y;                    DTsuperquad_PAS.z = -q.z;                elseif lambda.two == lambda.z                    DTsuperquad_PAS.y = -q.x;                    DTsuperquad_PAS.z = q.y;                    DTsuperquad_PAS.x = q.z;                end            elseif lambda.one == lambda.z                            if lambda.two == lambda.x                    DTsuperquad_PAS.z = -q.x;                    DTsuperquad_PAS.x = q.y;                    DTsuperquad_PAS.y = q.z;                elseif lambda.two == lambda.y                    DTsuperquad_PAS.z = -q.x;                    DTsuperquad_PAS.y = q.y;                    DTsuperquad_PAS.x = -q.z;                end            end            DTsuperquad_PAS.x = sqrt(lambda.x/Dmax)*DTsuperquad_PAS.x;            DTsuperquad_PAS.y = sqrt(lambda.y/Dmax)*DTsuperquad_PAS.y;            DTsuperquad_PAS.z = sqrt(lambda.z/Dmax)*DTsuperquad_PAS.z;            DTsuperquad_LF.x = R.mat(1,1)*DTsuperquad_PAS.x + R.mat(1,2)*DTsuperquad_PAS.y + R.mat(1,3)*DTsuperquad_PAS.z;            DTsuperquad_LF.y = R.mat(2,1)*DTsuperquad_PAS.x + R.mat(2,2)*DTsuperquad_PAS.y + R.mat(2,3)*DTsuperquad_PAS.z;            DTsuperquad_LF.z = R.mat(3,1)*DTsuperquad_PAS.x + R.mat(3,2)*DTsuperquad_PAS.y + R.mat(3,3)*DTsuperquad_PAS.z;            X = EllipseScale*DTsuperquad_LF.x;            Y = EllipseScale*DTsuperquad_LF.y;            Z = EllipseScale*DTsuperquad_LF.z;            if niso == 1                X = sqrt(1.3)*EllipseScale*DTsuperquad_LF.x;                Y = sqrt(1.3)*EllipseScale*DTsuperquad_LF.y;                Z = sqrt(1.3)*EllipseScale*DTsuperquad_LF.z;            end            figure(11), clf reset            h = surfl(X,Y,Z);            %axis tight            axis equal            axis(1*[-1 1 -1 1 -1 1])            view(0,0)            shading interp            colormap(gray(256))            %title(num2str(niso))            pause(.5)            axis off            %set(gcf,'color','none','inverthardcopy','off');            eval(['print -djpeg -r300 ' num2str(expno(nexp)) '/DTplot' num2str(niso)])        end        %%        delete([num2str(expno(nexp)) '/ReportFig.*'])        eval(['print -depsc -loose ' num2str(expno(nexp)) '/ReportFig'])        %eval(['save ' num2str(expno(nexp)) '/FitDat PP'])    endend