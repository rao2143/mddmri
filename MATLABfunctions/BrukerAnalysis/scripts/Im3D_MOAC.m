clear allwd = cd;%DataDir = '/opt/topspin2/data/DT/nmr';%DataDir = '/Users/daniel/NMRdata/AVII500/DT';%DataDir = '/Users/daniel/Documents/Spaces/Presentations';%DataDir = '/Users/daniel/Dropbox';DataDir = '/Users/daniel/Desktop';ExpNam = {'COMPILED_DATA'};td1start = 2;%td1end = 16;thresh = 50;CheckThresh = 0;MakeFit = 1;PlotInterm = 0;maxfail = 5;maxiter = 20;NBS = 10;Nnodes = 100;fs = 15;cd(DataDir)%GetExpnamsfor ndir = 1:length(ExpNam)    cd(ExpNam{ndir})    eval(['load ImagesRaw'])    Smax = max(abs(ImagesRaw.S));    [Nx,Ny,Nz,td1] = size(ImagesRaw.S);    bT = ImagesRaw.bT;    Nz = 1;    ImagesRaw.S = ImagesRaw.S(:,:,15,:);                if MakeFit               Dmin = 5e-10; Dmax = 3.5e-9; R1min = .2; R1max = 10; R2min = 2; R2max = 20;%                 eval(['load ' num2str(expno(nexp)) '/Images'])%                 Diso = Images.MD_erf(nx,ny);%                 DDelta = Images.DDelta(nx,ny);%                 Dpar = Diso*(1+2*DDelta);%                 Dperp = Diso*(1-DDelta);        R1 = 1;%                R2 = 10;        rng(1,'twister')        Npoints = bT.N;        NpointsBS = Npoints;        %NpointsBS = min([512; Npoints]);        %bT.TR = 1e6*ones(bT.N,1);        %bT.TE = 0*ones(bT.N,1);        bT.TR1w = 0*ones(bT.N,1);        ImagesMOAC_w = zeros(Nx,Ny,Nz,Nnodes,NBS);        ImagesMOAC_iso = zeros(Nx,Ny,Nz,Nnodes,NBS);        ImagesMOAC_Delta = zeros(Nx,Ny,Nz,Nnodes,NBS);        ImagesMOAC_theta = zeros(Nx,Ny,Nz,Nnodes,NBS);        ImagesMOAC_phi = zeros(Nx,Ny,Nz,Nnodes,NBS);        ImagesMOAC_R1 = zeros(Nx,Ny,Nz,Nnodes,NBS);        ImagesMOAC_R2 = zeros(Nx,Ny,Nz,Nnodes,NBS);        ImagesMOAC_chisq = zeros(Nx,Ny,Nz,NBS);        ImagesMOAC_nnonzero = zeros(Nx,Ny,Nz,NBS);        options = optimset('MaxFunEvals',1e4,'Display','off');        p =  TimedProgressBar( Ny, 10, ...        'Computing. Remaining time: ', ', Completed: ', 'Concluded in ' );        for nz = 1:Nz                parfor ny = 1:Ny                    for nx = 1:Nx    %%                    %nx = 53; ny = 30; nz = 15;                    %[nx ny]                    Signal = abs(squeeze(ImagesRaw.S(nx,ny,nz,:)));                    S_vector = Signal;                    S0 = max(S_vector);                                        if S0 > thresh        %                         Diso = 5e-10; DDelta = .85;        %                         bDDelDel = bT.trace.*Diso.*bT.Delta.*DDelta;        %                         S_powder = S0*exp(-bT.trace.*Diso).*exp(bDDelDel).*...        %                         sqrt(pi)/2.*real(gammainc(3*bDDelDel,1/2)./sqrt(3*bDDelDel)).*...        %                         exp(-bT.TR1w.*R1).*(1 - exp(-bT.TR.*R1)).*exp(-bT.TE.*R2);        %                         P_powder = .95;        %                         S_vector = (1-P_powder)*S_vector + P_powder * S_powder;                        %figure(1), clf, semilogy(bT.trace,S_vector,'o'), return%                         im_slice = ImagesRaw.S(:,:,nz,1);%                         figure(1), clf%                         colormap('gray')%                         imagesc(im_slice')%                         axis square%                         set(gca,'YDir','normal')%                         hold on%                         plot(nx,ny,'ro')%                         %figure(1), clf, plot3(bT.trace,bT.TE,S_vector,'o'), return                        chisq_v = zeros(NBS,1);                        niter_v = zeros(NBS,1);                        nfail_v = zeros(NBS,1);                        nnonzero_v = zeros(NBS,1);                        uDTrec_iso_a = zeros(Nnodes,NBS);                        uDTrec_Delta_a = zeros(Nnodes,NBS);                        uDTrec_theta_a = zeros(Nnodes,NBS);                        uDTrec_phi_a = zeros(Nnodes,NBS);                        uDTrec_R1_a = zeros(Nnodes,NBS);                        uDTrec_R2_a = zeros(Nnodes,NBS);                        uDTrec_w_a = zeros(Nnodes,NBS);                        %parfor nBS = 1:NBS                        for nBS = 1:NBS                        %%                                %indx_BS = (1:Npoints)';                            indx_BS = td1start - 1 + sort(ceil((Npoints-td1start+1)*rand(NpointsBS,1)));                            %figure(1), clf, plot(1:NpointsBS,indx_BS,'-'), return                            indx_BS_array = repmat(indx_BS',[NpointsBS 1]);                            bT_trace = repmat(bT.trace,1,Nnodes);                            bT_Delta = repmat(bT.Delta,1,Nnodes);                            bT_theta = repmat(bT.theta,1,Nnodes);                            bT_phi = repmat(bT.phi,1,Nnodes);                            bT_TR = repmat(bT.TR,1,Nnodes);                            bT_TR1w = repmat(bT.TR1w,1,Nnodes);                            bT_TE = repmat(bT.TE,1,Nnodes);                            %Nnodes = Nnodes_v(nBS);                            chisq0 = S0^2;                            chisq = .99*S0^2;                            niter2 = 0; niter = 0;                            uDTrec_iso_v = zeros(Nnodes,1);                            uDTrec_Delta_v = zeros(Nnodes,1);                            uDTrec_theta_v = zeros(Nnodes,1);                            uDTrec_phi_v = zeros(Nnodes,1);                            uDTrec_R1_v = zeros(Nnodes,1);                            uDTrec_R2_v = zeros(Nnodes,1);                            uDTrec_w_v = zeros(Nnodes,1);                %            while all([sqrt(chisq_temp) > chilim niter2 < maxiter2])                            niter = 0;                            uDTrec_w_v = 0*uDTrec_w_v;                            nfail = 0;                            niter = 0;                            while all([nfail < maxfail niter < maxiter])                                uDTrec_par_vtemp = Dmin*(Dmax/Dmin).^rand(Nnodes,1);                                uDTrec_perp_vtemp = Dmin*(Dmax/Dmin).^rand(Nnodes,1);                                %indx_iso = round(Nnodes*.9):Nnodes;                                %indx_iso = ceil(rand(ceil(.1*Nnodes),1)*Nnodes);                                indx_iso = 1:Nnodes;                                uDTrec_perp_vtemp(indx_iso) = uDTrec_par_vtemp(indx_iso);                                uDTrec_theta_vtemp = acos(2*rand(Nnodes,1)-1);                                uDTrec_phi_vtemp = 2*pi*rand(Nnodes,1);                                %indx_powder = ceil(rand(ceil(.3*Nnodes),1)*Nnodes);                                indx_powder = [];                                uDTrec_theta_vtemp(indx_powder) = NaN;                                uDTrec_R1_vtemp = R1min*(R1max/R1min).^rand(Nnodes,1);                                uDTrec_R2_vtemp = R2min*(R2max/R2min).^rand(Nnodes,1);                %                         uDTrec_par_vtemp =  Dpar*ones(Nnodes,1);                %                         uDTrec_perp_vtemp =  Dperp*ones(Nnodes,1);                                uDTrec_R1_vtemp = R1*ones(Nnodes,1);                %                uDTrec_R2_vtemp = R2*ones(Nnodes,1);                %                         uDTrec_par_vtemp = max([uDTrec_par_vtemp uDTrec_perp_vtemp],[],2);                                [uDTrec_w_v,indx] = sort(uDTrec_w_v,'descend');                                uDTrec_iso_v = uDTrec_iso_v(indx);                                uDTrec_Delta_v = uDTrec_Delta_v(indx);                                uDTrec_theta_v = uDTrec_theta_v(indx);                                uDTrec_phi_v = uDTrec_phi_v(indx);                                uDTrec_R1_v = uDTrec_R1_v(indx);                                uDTrec_R2_v = uDTrec_R2_v(indx);                                uDTrec_par_v = uDTrec_iso_v.*(1 + 2*uDTrec_Delta_v);                                uDTrec_perp_v = uDTrec_iso_v.*(1 - uDTrec_Delta_v);                                nnonzero = sum(uDTrec_w_v>0);                                indx = 1:nnonzero;                                uDTrec_par_vtemp(indx) = uDTrec_par_v(indx);                                uDTrec_perp_vtemp(indx) = uDTrec_perp_v(indx);                                uDTrec_theta_vtemp(indx) = uDTrec_theta_v(indx);                                uDTrec_phi_vtemp(indx) = uDTrec_phi_v(indx);                                uDTrec_R1_vtemp(indx) = uDTrec_R1_v(indx);                                uDTrec_R2_vtemp(indx) = uDTrec_R2_v(indx);                                %indx = 1:min([nnonzero floor(Nnodes/10)]);                                %indx2 = nnonzero + (1:numel(indx));                                indx2 = indx+min([nnonzero (Nnodes-max(indx))]);                                uDTrec_par_vtemp(indx2) = uDTrec_par_v(indx).*(1+.1*randn(nnonzero,1));                                uDTrec_perp_vtemp(indx2) = uDTrec_par_vtemp(indx2);                                %uDTrec_perp_vtemp(indx2) = uDTrec_perp_v(indx).*(1+.1*randn(nnonzero,1));                                uDTrec_theta_vtemp(indx2) = uDTrec_theta_v(indx) + .01*2*pi*randn(nnonzero,1);                                uDTrec_phi_vtemp(indx2) = uDTrec_phi_v(indx) + .01*2*pi*randn(nnonzero,1);                                %uDTrec_R1_vtemp(indx2) = uDTrec_R1_v(indx).*(1+.1*randn(nnonzero,1));                                uDTrec_R2_vtemp(indx2) = uDTrec_R2_v(indx).*(1+.1*randn(nnonzero,1));                                uDTrec_iso_vtemp = (uDTrec_par_vtemp + 2*uDTrec_perp_vtemp)/3;                                uDTrec_Delta_vtemp = (uDTrec_par_vtemp - uDTrec_perp_vtemp)/3./uDTrec_iso_vtemp;                                uDTrec_iso_vtemp(uDTrec_iso_vtemp>Dmax) = Dmax;                                uDTrec_iso_vtemp(uDTrec_iso_vtemp<Dmin) = Dmin;                                uDTrec_R1_vtemp(uDTrec_R1_vtemp>R1max) = R1max;                                uDTrec_R1_vtemp(uDTrec_R1_vtemp<R1min) = R1min;                                uDTrec_R2_vtemp(uDTrec_R2_vtemp>R2max) = R2max;                                uDTrec_R2_vtemp(uDTrec_R2_vtemp<R2min) = R2min;                                                                uDTrec_iso = repmat(uDTrec_iso_vtemp',Npoints,1);                                uDTrec_Delta = repmat(uDTrec_Delta_vtemp',Npoints,1);                                uDTrec_theta = repmat(uDTrec_theta_vtemp',Npoints,1);                                uDTrec_phi = repmat(uDTrec_phi_vtemp',Npoints,1);                                uDTrec_R1 = repmat(uDTrec_R1_vtemp',Npoints,1);                                uDTrec_R2 = repmat(uDTrec_R2_vtemp',Npoints,1);                                cosbeta = cos(bT_theta).*cos(uDTrec_theta) + sin(bT_theta).*sin(uDTrec_theta).*cos(bT_phi - uDTrec_phi);                                P2cosbeta = (3*cosbeta.^2 - 1)/2;                                Deff = uDTrec_iso.*(1 + 2*bT_Delta.*uDTrec_Delta.*P2cosbeta);                                Kernel = exp(-bT_trace.*Deff).*exp(-bT_TR1w.*uDTrec_R1)...                                    .*(1 - exp(-bT_TR.*uDTrec_R1)).*exp(-bT_TE.*uDTrec_R2);                                indx_powder = find(isnan(uDTrec_theta_vtemp));                                bDDelDel = bT_trace.*uDTrec_iso.*bT_Delta.*uDTrec_Delta;                                Kernel_powder = exp(-bT_trace.*uDTrec_iso).*exp(bDDelDel).*...                                    sqrt(pi)/2.*real(gammainc(3*bDDelDel,1/2)./sqrt(3*bDDelDel)).*...                                    exp(-bT_TR1w.*uDTrec_R1).*(1 - exp(-bT_TR.*uDTrec_R1)).*exp(-bT_TE.*uDTrec_R2);                                indx = bDDelDel == 0;                                Kernel_powder(indx) = exp(-bT_trace(indx).*uDTrec_iso(indx));                                Kernel_powder(bT_trace == 0) = 1;                                Kernel_powder(bDDelDel < -10) = 0;                                indx = isnan(Kernel_powder);                                Kernel_powder(indx) = 0;                                indx = isinf(Kernel_powder);                                Kernel_powder(indx) = 0;                                Kernel(:,indx_powder) = Kernel_powder(:,indx_powder);                                %figure(1), clf, plot(bT_trace,Kernel,'-'), return                                S_vector_temp = S_vector(indx_BS,1);                                Kernel_temp = Kernel(indx_BS,:);                %                     [S_vector_temp,indx] = sort(S_vector_temp,1,'descend');                %                     Kernel_temp = Kernel_temp(indx,:);                                uDTrec_w_vtemp = S0*lsqnonneg(Kernel_temp,S_vector_temp/S0);                                Scalc = Kernel_temp*uDTrec_w_vtemp;                                chisq = sum((S_vector_temp-Scalc).^2,1)/Npoints;%                                 mR2 = sum(uDTrec_w_vtemp.*uDTrec_R2_vtemp)/sum(uDTrec_w_vtemp);%                                 figure(2), clf%                                 plot(1:NpointsBS,Scalc,'k-',1:NpointsBS,S_vector_temp,'bo',[0; NpointsBS],sqrt(chisq)*[1; 1],'k--')%                                 title([num2str(niter) ' ' num2str(nfail) ' ' num2str(nnonzero) ' ' num2str(chisq,3) ' ' num2str(chisq0,3) ' R2=' num2str(mR2,3)])%                                 pause(.1)                                niter = niter+1;                                if chisq > chisq0*(1 - 1e-3)                                    nfail = nfail+1;                                end                                if chisq < chisq0*(1 - 0e-2)                                    uDTrec_iso_v = uDTrec_iso_vtemp;                                    uDTrec_Delta_v = uDTrec_Delta_vtemp;                                    uDTrec_theta_v = uDTrec_theta_vtemp;                                    uDTrec_phi_v = uDTrec_phi_vtemp;                                    uDTrec_R1_v = uDTrec_R1_vtemp;                                    uDTrec_R2_v = uDTrec_R2_vtemp;                                    uDTrec_w_v = uDTrec_w_vtemp;                                    chisq0 = chisq;                                end                            end                            [uDTrec_w_v,indx] = sort(uDTrec_w_v,'descend');                            uDTrec_iso_v = uDTrec_iso_v(indx);                            uDTrec_Delta_v = uDTrec_Delta_v(indx);                            uDTrec_theta_v = uDTrec_theta_v(indx);                            uDTrec_phi_v = uDTrec_phi_v(indx);                             uDTrec_R1_v = uDTrec_R1_v(indx);                             uDTrec_R2_v = uDTrec_R2_v(indx);                             nnonzero = sum(uDTrec_w_v>0);                            uDTrec_iso_a(:,nBS) = uDTrec_iso_v;                            uDTrec_Delta_a(:,nBS) = uDTrec_Delta_v;                            uDTrec_theta_a(:,nBS) = uDTrec_theta_v;                            uDTrec_phi_a(:,nBS) = uDTrec_phi_v;                            uDTrec_R1_a(:,nBS) = uDTrec_R1_v;                            uDTrec_R2_a(:,nBS) = uDTrec_R2_v;                            uDTrec_w_a(:,nBS) = uDTrec_w_v;                            chisq_v(nBS,1) = chisq;                            niter_v(nBS,1) = niter;                            nfail_v(nBS,1) = nfail;                            nnonzero_v(nBS,1) = nnonzero;                %                 figure(2), clf                %                 plot(1:Npoints,S_vector_temp,'o',1:Npoints,Scalc,'-')                %                 pause(.1)                        end    %                     figure(1), clf    %                     subplot(2,2,1)    %                     plot(1:NBS,sqrt(chisq_v),'o')    %                     ylabel('rms chi'), xlabel('nBS')    %                     subplot(2,2,2)    %                     hist(sqrt(chisq_v))    %                     xlabel('chisq')    %                     subplot(2,2,3)    %                     hist(niter_v)    %                     xlabel('niter')    %                     subplot(2,2,4)    %                     hist(nnonzero_v)    %                     xlabel('nnonzero')    %                     return                        ImagesMOAC_w(nx,ny,nz,:,:) = uDTrec_w_a;                        ImagesMOAC_iso(nx,ny,nz,:,:) = uDTrec_iso_a;                        ImagesMOAC_Delta(nx,ny,nz,:,:) = uDTrec_Delta_a;                        ImagesMOAC_theta(nx,ny,nz,:,:) = uDTrec_theta_a;                        ImagesMOAC_phi(nx,ny,nz,:,:) = uDTrec_phi_a;                        ImagesMOAC_R1(nx,ny,nz,:,:) = uDTrec_R1_a;                        ImagesMOAC_R2(nx,ny,nz,:,:) = uDTrec_R2_a;                        ImagesMOAC_chisq(nx,ny,nz,:) = chisq_v;                        ImagesMOAC_nnonzero(nx,ny,nz,:) = nnonzero_v;                    end                end                p.progress; %Counter for progress report            end        end        p.stop;%%        ImagesMOAC_a.w = ImagesMOAC_w;        ImagesMOAC_a.iso = ImagesMOAC_iso;        ImagesMOAC_a.Delta = ImagesMOAC_Delta;        ImagesMOAC_a.theta = ImagesMOAC_theta;        ImagesMOAC_a.phi = ImagesMOAC_phi;        ImagesMOAC_a.R1 = ImagesMOAC_R1;        ImagesMOAC_a.R2 = ImagesMOAC_R2;        ImagesMOAC_a.chisq = ImagesMOAC_chisq;        ImagesMOAC_a.nnonzero = ImagesMOAC_nnonzero;        ReconDat = struct('NBS',NBS,'Nnodes',Nnodes,'Dmin',Dmin,'Dmax',Dmax,...            'R1min',R1min,'R1max',R1max,'R2min',R2min,'R2max',R2max);        save('ImagesMOAC_a','ImagesMOAC_a','ReconDat')           end    cd ..endcd(wd)